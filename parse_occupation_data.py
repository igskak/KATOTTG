#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É –¥–∞–Ω–∏—Ö –ø—Ä–æ –æ–∫—É–ø–∞—Ü—ñ—é —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–π –∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ Word —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è MongoDB
–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 2025
"""

import pandas as pd
import pymongo
from pymongo import MongoClient
import sys
import os
from urllib.parse import quote_plus
from docx import Document
from dateutil import parser
from datetime import datetime
import re

# –†–Ø–î–û–ö –ü–Ü–î–ö–õ–Æ–ß–ï–ù–ù–Ø –î–û MONGODB ATLAS
username = quote_plus("test")
password = quote_plus("test")
MONGO_CONNECTION_STRING = f"mongodb+srv://{username}:{password}@clusterrd4u.7180sy4.mongodb.net/?retryWrites=true&w=majority&appName=ClusterRD4U"

# –ù–∞–∑–≤–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
DATABASE_NAME = "ua_admin_territory"

def connect_to_mongodb():
    """–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB Atlas"""
    try:
        print("üîå –ü—ñ–¥–∫–ª—é—á–∞—é—Å—è –¥–æ MongoDB Atlas...")
        client = MongoClient(MONGO_CONNECTION_STRING)
        client.admin.command('ping')
        print("‚úÖ –£—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MongoDB Atlas")
        return client
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB: {e}")
        sys.exit(1)

def parse_word_document(file_path):
    """
    –ü–∞—Ä—Å–∏–Ω–≥ –¥–æ–∫—É–º–µ–Ω—Ç–∞ Word –∑ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ –æ–∫—É–ø–∞—Ü—ñ—é
    –û—á—ñ–∫—É—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É: –ù–∞–∑–≤–∞ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó | –î–∞—Ç–∞ –ø–æ—á–∞—Ç–∫—É –æ–∫—É–ø–∞—Ü—ñ—ó | –î–∞—Ç–∞ –∫—ñ–Ω—Ü—è –æ–∫—É–ø–∞—Ü—ñ—ó | –°—Ç–∞—Ç—É—Å
    """
    try:
        print(f"üìñ –ß–∏—Ç–∞—é –¥–æ–∫—É–º–µ–Ω—Ç Word: {file_path}")
        doc = Document(file_path)
        
        occupation_data = []
        
        for paragraph in doc.paragraphs:
            text = paragraph.text.strip()
            if not text:
                continue
                
            # –°–ø—Ä–æ–±–∞ —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ —Ä—è–¥–æ–∫ –∑ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ –æ–∫—É–ø–∞—Ü—ñ—é
            # –û—á—ñ–∫—É—î–º–æ —Ñ–æ—Ä–º–∞—Ç: "–ù–∞–∑–≤–∞ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó | –î–∞—Ç–∞ –ø–æ—á–∞—Ç–∫—É | –î–∞—Ç–∞ –∫—ñ–Ω—Ü—è | –°—Ç–∞—Ç—É—Å"
            parts = [part.strip() for part in text.split('|')]
            
            if len(parts) >= 3:
                territory_name = parts[0]
                start_date_str = parts[1]
                end_date_str = parts[2] if len(parts) > 2 else ""
                status = parts[3] if len(parts) > 3 else "–¢–∏–º—á–∞—Å–æ–≤–æ –æ–∫—É–ø–æ–≤–∞–Ω–∞"
                
                # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç
                start_date = None
                end_date = None
                
                try:
                    if start_date_str and start_date_str.lower() not in ['', '–Ω/–¥', '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ']:
                        # –û—á–∏—â–∞–µ–º –æ—Ç –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫ –∏ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
                        clean_start_date = start_date_str.replace('\n', ' ').replace('\r', ' ').strip()
                        if clean_start_date:
                            start_date = parser.parse(clean_start_date, dayfirst=True)
                except:
                    print(f"‚ö†Ô∏è  –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ –¥–∞—Ç—É –ø–æ—á–∞—Ç–∫—É: {start_date_str}")
                
                try:
                    if end_date_str and end_date_str.lower() not in ['', '–Ω/–¥', '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ']:
                        # –û—á–∏—â–∞–µ–º –æ—Ç –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫ –∏ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
                        clean_end_date = end_date_str.replace('\n', ' ').replace('\r', ' ').strip()
                        if clean_end_date:
                            end_date = parser.parse(clean_end_date, dayfirst=True)
                except:
                    print(f"‚ö†Ô∏è  –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ –¥–∞—Ç—É –∫—ñ–Ω—Ü—è: {end_date_str}")
                
                occupation_data.append({
                    'territory_name': territory_name,
                    'start_date': start_date,
                    'end_date': end_date,
                    'status': status
                })
        
        print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(occupation_data)} –∑–∞–ø–∏—Å—ñ–≤ –ø—Ä–æ –æ–∫—É–ø–∞—Ü—ñ—é")
        return occupation_data
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ Word: {e}")
        sys.exit(1)

def parse_word_table(file_path):
    """
    –ü–∞—Ä—Å–∏–Ω–≥ —Ç–∞–±–ª–∏—Ü—ã Word —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏: –ö–æ–¥ | –ù–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è | –î–∞—Ç–∞ –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—è –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –±–æ–π–æ–≤–∏—Ö –¥—ñ–π | –î–∞—Ç–∞ –ø—Ä–∏–ø–∏–Ω–µ–Ω–Ω—è –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –±–æ–π–æ–≤–∏—Ö –¥—ñ–π
    """
    try:
        print(f"üìñ –ß–∏—Ç–∞—é —Ç–∞–±–ª–∏—Ü—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞ Word: {file_path}")
        doc = Document(file_path)
        occupation_data = []
        
        for table_idx, table in enumerate(doc.tables):
            print(f"  –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–∞–±–ª–∏—Ü—É {table_idx + 1} ({len(table.rows)} —Å—Ç—Ä–æ–∫)")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –Ω—É–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –ø–æ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ
            header = [cell.text.strip() for cell in table.rows[0].cells]
            code_idx = None
            name_idx = None
            start_idx = None
            end_idx = None
            
            for i, col in enumerate(header):
                if '–ö–æ–¥' in col:
                    code_idx = i
                elif '–ù–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è' in col:
                    name_idx = i
                elif '–î–∞—Ç–∞ –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—è' in col:
                    start_idx = i
                elif '–î–∞—Ç–∞ –ø—Ä–∏–ø–∏–Ω–µ–Ω–Ω—è' in col:
                    end_idx = i
            
            if None in (code_idx, name_idx, start_idx, end_idx):
                print(f"    ‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ {table_idx + 1} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏, –ø—Ä–æ–ø—É—Å–∫–∞—é")
                continue
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏, –Ω–∞—á–∏–Ω–∞—è —Å–æ –≤—Ç–æ—Ä–æ–π (–ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞)
            for row_idx, row in enumerate(table.rows[1:], 1):
                cells = [cell.text.strip() for cell in row.cells]
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏-–∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ–±–ª–∞—Å—Ç–µ–π –∏ —Ä–∞–π–æ–Ω–æ–≤
                if len(cells) > code_idx and cells[code_idx]:
                    code = cells[code_idx]
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π –∫–æ–¥ –ö–ê–¢–û–¢–¢–ì
                    if is_valid_katottg_code(code):
                        name = cells[name_idx] if len(cells) > name_idx else ""
                        start_date_str = cells[start_idx] if len(cells) > start_idx else ""
                        end_date_str = cells[end_idx] if len(cells) > end_idx else ""
                        
                        # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç
                        start_date = None
                        end_date = None
                        
                        try:
                            if start_date_str and start_date_str.lower() not in ['', '–Ω/–¥', '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ']:
                                # –û—á–∏—â–∞–µ–º –æ—Ç –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫ –∏ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
                                clean_start_date = start_date_str.replace('\n', ' ').replace('\r', ' ').strip()
                                if clean_start_date:
                                    start_date = parser.parse(clean_start_date, dayfirst=True)
                        except:
                            print(f"    ‚ö†Ô∏è  –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ –¥–∞—Ç—É –ø–æ—á–∞—Ç–∫—É: {start_date_str}")
                        
                        try:
                            if end_date_str and end_date_str.lower() not in ['', '–Ω/–¥', '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ']:
                                # –û—á–∏—â–∞–µ–º –æ—Ç –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫ –∏ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
                                clean_end_date = end_date_str.replace('\n', ' ').replace('\r', ' ').strip()
                                if clean_end_date:
                                    end_date = parser.parse(clean_end_date, dayfirst=True)
                        except:
                            print(f"    ‚ö†Ô∏è  –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ –¥–∞—Ç—É –∫—ñ–Ω—Ü—è: {end_date_str}")
                        
                        occupation_data.append({
                            'code': code,
                            'territory_name': name,
                            'start_date': start_date,
                            'end_date': end_date,
                            'status': '–¢–∏–º—á–∞—Å–æ–≤–æ –æ–∫—É–ø–æ–≤–∞–Ω–∞' if not end_date else '–ó–≤—ñ–ª—å–Ω–µ–Ω–∞'
                        })
                    else:
                        # –≠—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±–ª–∞—Å—Ç–∏ –∏–ª–∏ —Ä–∞–π–æ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                        pass
        
        print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(occupation_data)} –∑–∞–ø–∏—Å—ñ–≤ —É —Ç–∞–±–ª–∏—Ü—è—Ö")
        return occupation_data
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ Word: {e}")
        sys.exit(1)

def find_territory_in_mongodb(db, territory_name):
    """
    –ü–æ—à—É–∫ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó –≤ MongoDB –∑–∞ –Ω–∞–∑–≤–æ—é
    –®—É–∫–∞—î–º–æ –≤ —É—Å—ñ—Ö –∫–æ–ª–µ–∫—Ü—ñ—è—Ö
    """
    collections = [
        'level1_regions',
        'level2_raions', 
        'level3_hromadas',
        'level4_settlements',
        'level_additional_city_districts'
    ]
    
    for collection_name in collections:
        collection = db[collection_name]
        
        # –ü–æ—à—É–∫ –∑–∞ —Ç–æ—á–Ω–∏–º —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è–º –Ω–∞–∑–≤–∏
        result = collection.find_one({"name": territory_name})
        if result:
            return result, collection_name
            
        # –ü–æ—à—É–∫ –∑–∞ —á–∞—Å—Ç–∫–æ–≤–∏–º —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è–º (—è–∫—â–æ —Ç–æ—á–Ω–∏–π –ø–æ—à—É–∫ –Ω–µ –¥–∞–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤)
        result = collection.find_one({"name": {"$regex": territory_name, "$options": "i"}})
        if result:
            return result, collection_name
    
    return None, None

def find_territory_by_code(db, code):
    collections = [
        'level1_regions',
        'level2_raions', 
        'level3_hromadas',
        'level4_settlements',
        'level_additional_city_districts'
    ]
    for collection_name in collections:
        collection = db[collection_name]
        result = collection.find_one({"_id": code})
        if result:
            return result, collection_name
    return None, None

def update_occupation_history(db, territory_doc, collection_name, occupation_data):
    """
    –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –æ–∫—É–ø–∞—Ü—ñ—ó –¥–ª—è —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó
    –ü—ñ–¥—Ç—Ä–∏–º—É—î –º–Ω–æ–∂–∏–Ω–Ω—ñ –ø–µ—Ä—ñ–æ–¥–∏ –æ–∫—É–ø–∞—Ü—ñ—ó
    """
    collection = db[collection_name]
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å –ø—Ä–æ –æ–∫—É–ø–∞—Ü—ñ—é
    occupation_record = {
        'start_date': occupation_data['start_date'],
        'end_date': occupation_data['end_date'],
        'status': occupation_data['status'],
        'updated_at': datetime.now()
    }
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É —ñ—Å—Ç–æ—Ä—ñ—é –æ–∫—É–ø–∞—Ü—ñ—ó
    current_doc = collection.find_one({"_id": territory_doc["_id"]})
    
    if current_doc and 'occupation_history' in current_doc:
        occupation_history = current_doc['occupation_history']
    else:
        occupation_history = []
    
    # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó
    occupation_history.append(occupation_record)
    
    # –û–Ω–æ–≤–ª—é—î–º–æ –¥–æ–∫—É–º–µ–Ω—Ç
    update_data = {
        "$set": {
            "occupation_history": occupation_history,
            "current_occupation_status": occupation_data['status'],
            "last_occupation_update": datetime.now()
        }
    }
    
    # –Ø–∫—â–æ —î –¥–∞—Ç–∞ –ø–æ—á–∞—Ç–∫—É –æ–∫—É–ø–∞—Ü—ñ—ó, –¥–æ–¥–∞—î–º–æ —ó—ó
    if occupation_data['start_date']:
        update_data["$set"]["occupation_start_date"] = occupation_data['start_date']
    
    # –Ø–∫—â–æ —î –¥–∞—Ç–∞ –∫—ñ–Ω—Ü—è –æ–∫—É–ø–∞—Ü—ñ—ó, –¥–æ–¥–∞—î–º–æ —ó—ó
    if occupation_data['end_date']:
        update_data["$set"]["occupation_end_date"] = occupation_data['end_date']
    
    collection.update_one({"_id": territory_doc["_id"]}, update_data)
    
    print(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ —ñ—Å—Ç–æ—Ä—ñ—é –æ–∫—É–ø–∞—Ü—ñ—ó –¥–ª—è: {territory_doc['name']}")

def update_occupation_history_by_code(db, territory_doc, collection_name, occupation_data):
    collection = db[collection_name]
    occupation_record = {
        'start_date': occupation_data['start_date'],
        'end_date': occupation_data['end_date'],
        'status': occupation_data['status'],
        'updated_at': datetime.now()
    }
    current_doc = collection.find_one({"_id": territory_doc["_id"]})
    if current_doc and 'occupation_history' in current_doc:
        occupation_history = current_doc['occupation_history']
    else:
        occupation_history = []
    occupation_history.append(occupation_record)
    update_data = {
        "$set": {
            "occupation_history": occupation_history,
            "current_occupation_status": occupation_data['status'],
            "last_occupation_update": datetime.now(),
            "occupation_start_date": occupation_data['start_date'],
            "occupation_end_date": occupation_data['end_date']
        }
    }
    collection.update_one({"_id": territory_doc["_id"]}, update_data)
    print(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ —ñ—Å—Ç–æ—Ä—ñ—é –æ–∫—É–ø–∞—Ü—ñ—ó –¥–ª—è: {territory_doc['name']} ({territory_doc['_id']})")

def process_occupation_data(client, occupation_data):
    """–û–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö –ø—Ä–æ –æ–∫—É–ø–∞—Ü—ñ—é —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è MongoDB"""
    db = client[DATABASE_NAME]
    
    updated_count = 0
    not_found_count = 0
    
    print("üöÄ –ü–æ—á–∏–Ω–∞—é –æ–±—Ä–æ–±–∫—É –¥–∞–Ω–∏—Ö –ø—Ä–æ –æ–∫—É–ø–∞—Ü—ñ—é...")
    
    for data in occupation_data:
        territory_name = data['territory_name']
        
        # –®—É–∫–∞—î–º–æ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—é –≤ MongoDB
        territory_doc, collection_name = find_territory_in_mongodb(db, territory_name)
        
        if territory_doc:
            update_occupation_history(db, territory_doc, collection_name, data)
            updated_count += 1
        else:
            print(f"‚ö†Ô∏è  –¢–µ—Ä–∏—Ç–æ—Ä—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {territory_name}")
            not_found_count += 1
    
    print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–æ–±–∫–∏:")
    print(f"   –û–Ω–æ–≤–ª–µ–Ω–æ: {updated_count} —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–π")
    print(f"   –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {not_found_count} —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–π")

def process_occupation_data_by_code(client, occupation_data):
    db = client[DATABASE_NAME]
    updated_count = 0
    not_found_count = 0
    print("üöÄ –ü–æ—á–∏–Ω–∞—é –æ–±—Ä–æ–±–∫—É –¥–∞–Ω–∏—Ö –ø—Ä–æ –æ–∫—É–ø–∞—Ü—ñ—é (–ø–æ –∫–æ–¥—É)...")
    for data in occupation_data:
        code = data['code']
        territory_doc, collection_name = find_territory_by_code(db, code)
        if territory_doc:
            update_occupation_history_by_code(db, territory_doc, collection_name, data)
            updated_count += 1
        else:
            print(f"‚ö†Ô∏è  –¢–µ—Ä–∏—Ç–æ—Ä—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ –∫–æ–¥–æ–º: {code} ({data['territory_name']})")
            not_found_count += 1
    print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–æ–±–∫–∏:")
    print(f"   –û–Ω–æ–≤–ª–µ–Ω–æ: {updated_count} —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–π")
    print(f"   –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {not_found_count} —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–π")

def query_occupation_status(client, query_date):
    """
    –ó–∞–ø–∏—Ç —Å—Ç–∞—Ç—É—Å—É –æ–∫—É–ø–∞—Ü—ñ—ó –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –¥–∞—Ç—É
    """
    db = client[DATABASE_NAME]
    
    collections = [
        'level1_regions',
        'level2_raions', 
        'level3_hromadas',
        'level4_settlements',
        'level_additional_city_districts'
    ]
    
    occupied_territories = []
    
    for collection_name in collections:
        collection = db[collection_name]
        
        # –®—É–∫–∞—î–º–æ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó, —è–∫—ñ –±—É–ª–∏ –æ–∫—É–ø–æ–≤–∞–Ω—ñ –Ω–∞ –≤–∫–∞–∑–∞–Ω—É –¥–∞—Ç—É
        pipeline = [
            {
                "$match": {
                    "occupation_history": {"$exists": True}
                }
            },
            {
                "$addFields": {
                    "occupation_status_on_date": {
                        "$filter": {
                            "input": "$occupation_history",
                            "as": "period",
                            "cond": {
                                "$and": [
                                    {
                                        "$lte": [
                                            "$$period.start_date",
                                            query_date
                                        ]
                                    },
                                    {
                                        "$or": [
                                            {"$eq": ["$$period.end_date", None]},
                                            {"$gte": ["$$period.end_date", query_date]}
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                }
            },
            {
                "$match": {
                    "occupation_status_on_date": {"$ne": []}
                }
            }
        ]
        
        results = list(collection.aggregate(pipeline))
        
        for result in results:
            occupied_territories.append({
                'name': result['name'],
                'category': result['category'],
                'collection': collection_name,
                'occupation_periods': result['occupation_status_on_date']
            })
    
    return occupied_territories

def is_valid_katottg_code(code):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫–æ–¥ –ö–ê–¢–û–¢–¢–ì –≤–∞–ª–∏–¥–Ω—ã–π: –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å UA –∏ –¥–∞–ª–µ–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –¥–ª–∏–Ω–∞ 18-20 —Å–∏–º–≤–æ–ª–æ–≤"""
    return bool(re.fullmatch(r'UA\d{17,19}', code))

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print("=" * 60)
    print("üöÄ –°–ö–†–ò–ü–¢ –ü–ê–†–°–ò–ù–ì–£ –î–ê–ù–ò–• –ü–†–û –û–ö–£–ü–ê–¶–Ü–Æ")
    print("=" * 60)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞
    if len(sys.argv) < 2:
        print("‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: python3 parse_occupation_data.py <—à–ª—è—Ö_–¥–æ_–¥–æ–∫—É–º–µ–Ω—Ç–∞.docx>")
        print("   –ê–±–æ: python3 parse_occupation_data.py --query <–¥–∞—Ç–∞>")
        sys.exit(1)
    
    # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è –¥–æ MongoDB
    client = connect_to_mongodb()
    
    if sys.argv[1] == "--query":
        if len(sys.argv) < 3:
            print("‚ùå –í–∫–∞–∂—ñ—Ç—å –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Ç—É: python3 parse_occupation_data.py --query <–¥–∞—Ç–∞>")
            sys.exit(1)
        
        try:
            query_date = parser.parse(sys.argv[2], dayfirst=True)
            print(f"üîç –®—É–∫–∞—é —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó, –æ–∫—É–ø–æ–≤–∞–Ω—ñ –Ω–∞ {query_date.strftime('%d.%m.%Y')}...")
            
            occupied_territories = query_occupation_status(client, query_date)
            
            print(f"\nüìä –ó–Ω–∞–π–¥–µ–Ω–æ {len(occupied_territories)} –æ–∫—É–ø–æ–≤–∞–Ω–∏—Ö —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–π:")
            for territory in occupied_territories:
                print(f"   ‚Ä¢ {territory['name']} ({territory['category']})")
                for period in territory['occupation_periods']:
                    start_str = period['start_date'].strftime('%d.%m.%Y') if period['start_date'] else '–Ω/–¥'
                    end_str = period['end_date'].strftime('%d.%m.%Y') if period['end_date'] else '–Ω/–¥'
                    print(f"     –ü–µ—Ä—ñ–æ–¥: {start_str} - {end_str} ({period['status']})")
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –¥–∞—Ç–∏: {e}")
            sys.exit(1)
    
    else:
        # –ü–∞—Ä—Å–∏–Ω–≥ –¥–æ–∫—É–º–µ–Ω—Ç–∞ Word
        word_file_path = sys.argv[1]
        
        if not os.path.exists(word_file_path):
            print(f"‚ùå –§–∞–π–ª '{word_file_path}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            sys.exit(1)
        
        # –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É
        occupation_data = parse_word_table(word_file_path)
        if occupation_data:
            print(f"\nüìä –ó–Ω–∞–π–¥–µ–Ω–æ {len(occupation_data)} –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –æ–±—Ä–æ–±–∫–∏")
            process_occupation_data_by_code(client, occupation_data)
        else:
            # fallback: —Å—Ç–∞—Ä—ã–π –ø–∞—Ä—Å–µ—Ä –ø–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞–º
            occupation_data = parse_word_document(word_file_path)
            if occupation_data:
                process_occupation_data(client, occupation_data)
            else:
                print("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–∏—Ö –ø—Ä–æ –æ–∫—É–ø–∞—Ü—ñ—é –≤ –¥–æ–∫—É–º–µ–Ω—Ç—ñ")
    
    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è
    client.close()
    print("\nüîå –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ MongoDB –∑–∞–∫—Ä–∏—Ç–æ")
    print("=" * 60)
    print("üéâ –†–æ–±–æ—Ç–∞ —Å–∫—Ä–∏–ø—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")

if __name__ == "__main__":
    main() 