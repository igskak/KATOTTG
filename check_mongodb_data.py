#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–∞–Ω–∏—Ö –≤ MongoDB Atlas
–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 2025
"""

import pymongo
from pymongo import MongoClient
import sys
from urllib.parse import quote_plus
import os

# –†–Ø–î–û–ö –ü–Ü–î–ö–õ–Æ–ß–ï–ù–ù–Ø –î–û MONGODB ATLAS
username = quote_plus("test")
password = quote_plus("test")
MONGO_CONNECTION_STRING = f"mongodb+srv://{username}:{password}@clusterrd4u.7180sy4.mongodb.net/?retryWrites=true&w=majority&appName=ClusterRD4U"

# –ù–∞–∑–≤–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
DATABASE_NAME = "ua_admin_territory"

def connect_to_mongodb():
    """–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB Atlas"""
    try:
        print("üîå –ü—ñ–¥–∫–ª—é—á–∞—é—Å—è –¥–æ MongoDB Atlas...")
        client = MongoClient(MONGO_CONNECTION_STRING)
        client.admin.command('ping')
        print("‚úÖ –£—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MongoDB Atlas")
        return client
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB: {e}")
        sys.exit(1)

def check_collection_data(db, collection_name):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö –≤ –∫–æ–ª–µ–∫—Ü—ñ—ó"""
    collection = db[collection_name]
    total_count = collection.count_documents({})
    
    print(f"\nüìä –ö–æ–ª–µ–∫—Ü—ñ—è: {collection_name}")
    print(f"   –í—Å—å–æ–≥–æ –∑–∞–ø–∏—Å—ñ–≤: {total_count}")
    
    if total_count > 0:
        # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 5 –∑–∞–ø–∏—Å—ñ–≤
        print("   –ü–µ—Ä—à—ñ 5 –∑–∞–ø–∏—Å—ñ–≤:")
        for doc in collection.find().limit(5):
            print(f"     ‚Ä¢ {doc['name']} ({doc['_id']}) - –∫–∞—Ç–µ–≥–æ—Ä—ñ—è: {doc['category']}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
        pipeline = [
            {"$group": {"_id": "$category", "count": {"$sum": 1}}},
            {"$sort": {"count": -1}}
        ]
        
        category_stats = list(collection.aggregate(pipeline))
        print("   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö:")
        for stat in category_stats:
            print(f"     ‚Ä¢ {stat['_id']}: {stat['count']} –∑–∞–ø–∏—Å—ñ–≤")
    
    return total_count

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print("=" * 60)
    print("üîç –ü–ï–†–ï–í–Ü–†–ö–ê –î–ê–ù–ò–• –í MONGODB ATLAS")
    print("=" * 60)
    
    # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è –¥–æ MongoDB
    client = connect_to_mongodb()
    db = client[DATABASE_NAME]
    
    # –°–ø–∏—Å–æ–∫ –∫–æ–ª–µ–∫—Ü—ñ–π –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
    collections = [
        'level1_regions',      # –û–±–ª–∞—Å—Ç—ñ —Ç–∞ –ê–†–ö
        'level2_raions',       # –†–∞–π–æ–Ω–∏
        'level3_hromadas',     # –ì—Ä–æ–º–∞–¥–∏
        'level4_settlements',  # –ù–∞—Å–µ–ª–µ–Ω—ñ –ø—É–Ω–∫—Ç–∏
        'level_additional_city_districts'  # –ú—ñ—Å—å–∫—ñ —Ä–∞–π–æ–Ω–∏
    ]
    
    total_records = 0
    
    for collection_name in collections:
        count = check_collection_data(db, collection_name)
        total_records += count
    
    print(f"\nüìà –ó–ê–ì–ê–õ–¨–ù–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –í—Å—å–æ–≥–æ –∑–∞–ø–∏—Å—ñ–≤ –≤ –±–∞–∑—ñ: {total_records}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∑–∞–ø–∏—Å–∏ –∑ –æ–∫—É–ø–∞—Ü—ñ—î—é
    print(f"\nüéØ –ü–ï–†–ï–í–Ü–†–ö–ê –î–ê–ù–ò–• –ü–†–û –û–ö–£–ü–ê–¶–Ü–Æ:")
    for collection_name in collections:
        collection = db[collection_name]
        occupation_count = collection.count_documents({"occupation_history": {"$exists": True}})
        if occupation_count > 0:
            print(f"   {collection_name}: {occupation_count} –∑–∞–ø–∏—Å—ñ–≤ –∑ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ –æ–∫—É–ø–∞—Ü—ñ—é")
    
    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è
    client.close()
    print("\nüîå –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ MongoDB –∑–∞–∫—Ä–∏—Ç–æ")
    print("=" * 60)
    print("üéâ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

def check_database_structure():
    """Check the structure of territory data in MongoDB"""
    print("üîç –ü–ï–†–ï–í–Ü–†–ö–ê –°–¢–†–£–ö–¢–£–†–ò –ë–ê–ó–ò –î–ê–ù–ò–• MONGODB")
    print("=" * 50)
    
    try:
        client = MongoClient(MONGO_CONNECTION_STRING)
        db = client.katottg
        
        # Check collections
        collections = ['level1_regions', 'level2_raions', 'level3_hromadas', 'level4_settlements']
        
        for collection_name in collections:
            print(f"\n=== {collection_name.upper()} ===")
            collection = db[collection_name]
            count = collection.count_documents({})
            print(f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤: {count}")
            
            if count > 0:
                # Get sample documents
                sample = list(collection.find({}, {'code': 1, 'name': 1, '_id': 0}).limit(3))
                for i, item in enumerate(sample, 1):
                    code = item.get('code', 'N/A')
                    name = item.get('name', 'N/A')
                    print(f"  {i}. Code: {code} | Name: {name}")
                    
                    # Check code length
                    if code != 'N/A':
                        print(f"     –î–æ–≤–∂–∏–Ω–∞ –∫–æ–¥—É: {len(code)} —Å–∏–º–≤–æ–ª—ñ–≤")
        
        # Check if there are any territories with the new status fields
        print(f"\n=== –ü–ï–†–ï–í–Ü–†–ö–ê –°–¢–ê–¢–£–°–Ü–í ===")
        for collection_name in collections:
            collection = db[collection_name]
            with_status = collection.count_documents({"status_periods": {"$exists": True, "$ne": []}})
            print(f"{collection_name}: {with_status} —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–π –∑—ñ —Å—Ç–∞—Ç—É—Å–∞–º–∏")
        
        client.close()
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB: {e}")

def check_specific_codes():
    """Check if specific codes from the document exist in the database"""
    print(f"\nüîç –ü–ï–†–ï–í–Ü–†–ö–ê –ö–û–ù–ö–†–ï–¢–ù–ò–• –ö–û–î–Ü–í –ó –î–û–ö–£–ú–ï–ù–¢–ê")
    print("=" * 50)
    
    # Sample codes from the document
    test_codes = [
        "UA12060090000074553",  # –ì—Ä—É—à—ñ–≤—Å—å–∫–∞ —Å—ñ–ª—å—Å—å–∫–∞ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–∞–ª—å–Ω–∞ –≥—Ä–æ–º–∞–¥–∞
        "UA12060130000012028",  # –ó–µ–ª–µ–Ω–æ–¥–æ–ª—å—Å—å–∫–∞ –º—ñ—Å—å–∫–∞ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–∞–ª—å–Ω–∞ –≥—Ä–æ–º–∞–¥–∞
        "UA12080010000029838",  # –ú–∞—Ä–≥–∞–Ω–µ—Ü—å–∫–∞ –º—ñ—Å—å–∫–∞ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–∞–ª—å–Ω–∞ –≥—Ä–æ–º–∞–¥–∞
        "UA01000000000013043",  # –ê–≤—Ç–æ–Ω–æ–º–Ω–∞ –†–µ—Å–ø—É–±–ª—ñ–∫–∞ –ö—Ä–∏–º
        "UA14140000000070889",  # –ú–∞—Ä—ñ—É–ø–æ–ª—å—Å—å–∫–∏–π —Ä–∞–π–æ–Ω
    ]
    
    try:
        client = MongoClient(MONGO_CONNECTION_STRING)
        db = client.katottg
        
        collections = ['level1_regions', 'level2_raions', 'level3_hromadas', 'level4_settlements']
        
        for code in test_codes:
            print(f"\nüîç –ü–æ—à—É–∫ –∫–æ–¥—É: {code}")
            found = False
            
            for collection_name in collections:
                collection = db[collection_name]
                result = collection.find_one({"code": code})
                
                if result:
                    print(f"  ‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –≤ {collection_name}")
                    print(f"     –ù–∞–∑–≤–∞: {result.get('name', 'N/A')}")
                    found = True
                    break
            
            if not found:
                print(f"  ‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∂–æ–¥–Ω—ñ–π –∫–æ–ª–µ–∫—Ü—ñ—ó")
                
                # Try to find similar codes
                print(f"  üîç –ü–æ—à—É–∫ –ø–æ–¥—ñ–±–Ω–∏—Ö –∫–æ–¥—ñ–≤...")
                for collection_name in collections:
                    collection = db[collection_name]
                    # Search for codes that start with the same pattern
                    pattern = code[:8]  # First 8 characters
                    similar = list(collection.find({"code": {"$regex": f"^{pattern}"}}, 
                                                  {"code": 1, "name": 1, "_id": 0}).limit(2))
                    if similar:
                        print(f"    {collection_name}: {[item['code'] for item in similar]}")
        
        client.close()
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

if __name__ == "__main__":
    main()
    check_database_structure()
    check_specific_codes() 