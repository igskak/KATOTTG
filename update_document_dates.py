#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö –∑–∞–ø–∏—Å—ñ–≤, –¥–æ–¥–∞—é—á–∏ —á–∏—Ç–∞–±–µ–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 2025
"""

import pymongo
from pymongo import MongoClient
from urllib.parse import quote_plus
from datetime import datetime
import json

# –†–Ø–î–û–ö –ü–Ü–î–ö–õ–Æ–ß–ï–ù–ù–Ø –î–û MONGODB ATLAS
username = quote_plus("test")
password = quote_plus("test")
MONGO_CONNECTION_STRING = f"mongodb+srv://{username}:{password}@clusterrd4u.7180sy4.mongodb.net/?retryWrites=true&w=majority&appName=ClusterRD4U"

# –ù–∞–∑–≤–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
DATABASE_NAME = "ua_admin_territory"

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
DOCUMENT_CONFIG = {
    'document_name': '–ü–µ—Ä–µ–ª—ñ–∫ 07052025',
    'document_date': '07.05.2025',  # –ß–∏—Ç–∞–±–µ–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏
    'document_date_iso': '2025-05-07',  # ISO —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –ø–æ—Ç—Ä–µ–±
    'document_description': '–î–æ–∫—É–º–µ–Ω—Ç –ü–µ—Ä–µ–ª—ñ–∫ 07052025 –≤—ñ–¥ 7 —Ç—Ä–∞–≤–Ω—è 2025 —Ä–æ–∫—É'
}

def connect_to_mongodb():
    """–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB Atlas"""
    try:
        print("üîå –ü—ñ–¥–∫–ª—é—á–∞—é—Å—è –¥–æ MongoDB Atlas...")
        client = MongoClient(MONGO_CONNECTION_STRING)
        client.admin.command('ping')
        print("‚úÖ –£—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MongoDB Atlas")
        return client
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB: {e}")
        return None

def update_document_dates(client):
    """
    –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö –∑–∞–ø–∏—Å—ñ–≤, –¥–æ–¥–∞—é—á–∏ —á–∏—Ç–∞–±–µ–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    """
    db = client[DATABASE_NAME]
    
    collections = [
        'level1_regions',
        'level2_raions', 
        'level3_hromadas',
        'level4_settlements',
        'level_additional_city_districts'
    ]
    
    print("\nüîÑ –û–ù–û–í–õ–ï–ù–ù–Ø –î–ê–¢ –î–û–ö–£–ú–ï–ù–¢–Ü–í –£ –ë–ê–ó–Ü –î–ê–ù–ò–•")
    print("=" * 60)
    print(f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç: {DOCUMENT_CONFIG['document_name']}")
    print(f"üìÖ –ù–æ–≤–∞ –¥–∞—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {DOCUMENT_CONFIG['document_date']}")
    print(f"üìÖ ISO –¥–∞—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {DOCUMENT_CONFIG['document_date_iso']}")
    print("=" * 60)
    
    total_updated = 0
    total_errors = 0
    
    for collection_name in collections:
        print(f"\nüìä –ö–æ–ª–µ–∫—Ü—ñ—è: {collection_name}")
        print("-" * 40)
        
        collection = db[collection_name]
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó –∑ —ñ—Å—Ç–æ—Ä—ñ—î—é —Å—Ç–∞—Ç—É—Å—ñ–≤
        territories = collection.find({
            "$or": [
                {"occupation_history": {"$exists": True}},
                {"combat_history": {"$exists": True}},
                {"status_history": {"$exists": True}}
            ]
        })
        
        collection_updated = 0
        collection_errors = 0
        
        for territory in territories:
            try:
                needs_update = False
                update_data = {}
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω–µ –ø–æ–ª–µ —ñ—Å—Ç–æ—Ä—ñ—ó
                for history_field in ['occupation_history', 'combat_history', 'status_history']:
                    if history_field in territory and territory[history_field]:
                        updated_history = []
                        
                        for period in territory[history_field]:
                            updated_period = period.copy()
                            
                            # –î–æ–¥–∞—î–º–æ —á–∏—Ç–∞–±–µ–ª—å–Ω—É –¥–∞—Ç—É, —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
                            if 'document_date' not in period or period['document_date'] != DOCUMENT_CONFIG['document_date']:
                                updated_period['document_date'] = DOCUMENT_CONFIG['document_date']
                                needs_update = True
                            
                            # –î–æ–¥–∞—î–º–æ ISO –¥–∞—Ç—É, —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
                            if 'document_date_iso' not in period:
                                updated_period['document_date_iso'] = DOCUMENT_CONFIG['document_date_iso']
                                needs_update = True
                            
                            # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∂–µ—Ä–µ–ª–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
                            if 'source_document' not in period or period['source_document'] != DOCUMENT_CONFIG['document_name']:
                                updated_period['source_document'] = DOCUMENT_CONFIG['document_name']
                                needs_update = True
                            
                            updated_history.append(updated_period)
                        
                        if needs_update:
                            update_data[history_field] = updated_history
                
                # –û–Ω–æ–≤–ª—é—î–º–æ –¥–æ–∫—É–º–µ–Ω—Ç, —è–∫—â–æ —î –∑–º—ñ–Ω–∏
                if needs_update:
                    result = collection.update_one(
                        {"_id": territory["_id"]},
                        {"$set": update_data}
                    )
                    
                    if result.modified_count > 0:
                        collection_updated += 1
                        total_updated += 1
                        print(f"  ‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ: {territory['name']}")
                    else:
                        collection_errors += 1
                        total_errors += 1
                        print(f"  ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {territory['name']}")
                
            except Exception as e:
                collection_errors += 1
                total_errors += 1
                print(f"  ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ {territory.get('name', '–Ω–µ–≤—ñ–¥–æ–º–∞ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—è')}: {e}")
        
        print(f"  üìä –û–Ω–æ–≤–ª–µ–Ω–æ: {collection_updated}, –ø–æ–º–∏–ª–æ–∫: {collection_errors}")
    
    print(f"\nüìà –ó–ê–ì–ê–õ–¨–ù–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ù–û–í–õ–ï–ù–ù–Ø:")
    print("-" * 40)
    print(f"  ‚úÖ –£—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ: {total_updated}")
    print(f"  ‚ùå –ü–æ–º–∏–ª–æ–∫: {total_errors}")
    
    return total_updated, total_errors

def verify_updates(client):
    """
    –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    """
    db = client[DATABASE_NAME]
    
    collections = [
        'level1_regions',
        'level2_raions', 
        'level3_hromadas',
        'level4_settlements',
        'level_additional_city_districts'
    ]
    
    print(f"\nüîç –ü–ï–†–ï–í–Ü–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–Ü–í –û–ù–û–í–õ–ï–ù–ù–Ø:")
    print("=" * 60)
    
    total_with_readable_dates = 0
    total_without_readable_dates = 0
    
    for collection_name in collections:
        collection = db[collection_name]
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó –∑ —ñ—Å—Ç–æ—Ä—ñ—î—é —Å—Ç–∞—Ç—É—Å—ñ–≤
        territories = collection.find({
            "$or": [
                {"occupation_history": {"$exists": True}},
                {"combat_history": {"$exists": True}},
                {"status_history": {"$exists": True}}
            ]
        })
        
        collection_with_readable = 0
        collection_without_readable = 0
        
        for territory in territories:
            has_readable_dates = False
            
            for history_field in ['occupation_history', 'combat_history', 'status_history']:
                if history_field in territory:
                    for period in territory[history_field]:
                        if 'document_date' in period and period['document_date'] == DOCUMENT_CONFIG['document_date']:
                            has_readable_dates = True
                            break
                    if has_readable_dates:
                        break
            
            if has_readable_dates:
                collection_with_readable += 1
            else:
                collection_without_readable += 1
        
        total_with_readable_dates += collection_with_readable
        total_without_readable_dates += collection_without_readable
        
        print(f"  {collection_name}: {collection_with_readable} –∑ —á–∏—Ç–∞–±–µ–ª—å–Ω–∏–º–∏ –¥–∞—Ç–∞–º–∏, {collection_without_readable} –±–µ–∑")
    
    print(f"\nüìä –ü–Ü–î–°–£–ú–û–ö –ü–ï–†–ï–í–Ü–†–ö–ò:")
    print("-" * 40)
    print(f"  ‚úÖ –ó —á–∏—Ç–∞–±–µ–ª—å–Ω–∏–º–∏ –¥–∞—Ç–∞–º–∏: {total_with_readable_dates}")
    print(f"  ‚ùå –ë–µ–∑ —á–∏—Ç–∞–±–µ–ª—å–Ω–∏—Ö –¥–∞—Ç: {total_without_readable_dates}")
    
    if total_without_readable_dates == 0:
        print(f"  üéâ –í—Å—ñ –∑–∞–ø–∏—Å–∏ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ!")
    else:
        print(f"  ‚ö†Ô∏è  –ü–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∫–æ–≤–æ –æ–Ω–æ–≤–∏—Ç–∏ {total_without_readable_dates} –∑–∞–ø–∏—Å—ñ–≤")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print("üîÑ –û–ù–û–í–õ–ï–ù–ù–Ø –î–ê–¢ –î–û–ö–£–ú–ï–ù–¢–Ü–í –£ –ë–ê–ó–Ü –î–ê–ù–ò–•")
    print("=" * 60)
    
    # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è –¥–æ MongoDB
    client = connect_to_mongodb()
    if not client:
        return
    
    try:
        # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        print(f"\nü§î –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:")
        print(f"  üìÑ –î–æ–∫—É–º–µ–Ω—Ç: {DOCUMENT_CONFIG['document_name']}")
        print(f"  üìÖ –ù–æ–≤–∞ –¥–∞—Ç–∞: {DOCUMENT_CONFIG['document_date']}")
        print(f"  üìÖ ISO –¥–∞—Ç–∞: {DOCUMENT_CONFIG['document_date_iso']}")
        
        confirm = input("\nü§î –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è? (y/N): ").strip().lower()
        if confirm != 'y':
            print("‚ùå –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
            return
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
        updated, errors = update_document_dates(client)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        verify_updates(client)
        
        print(f"\n‚úÖ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print(f"üìä –û–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å—ñ–≤: {updated}")
        print(f"‚ùå –ü–æ–º–∏–ª–æ–∫: {errors}")
        
    except Exception as e:
        print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
    
    finally:
        client.close()
        print("\nüîå –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ MongoDB –∑–∞–∫—Ä–∏—Ç–æ")

if __name__ == "__main__":
    main() 