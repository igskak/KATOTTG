#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–†–æ–∑—à–∏—Ä–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É –¥–∞–Ω–∏—Ö –∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ü–µ—Ä–µ–ª—ñ–∫ 07052025 –≤ MongoDB
–î–æ–¥–∞–Ω–æ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –¥–∞—Ç–∏ —ñ–º–ø–æ—Ä—Ç—É, –≤–µ—Ä—Å—ñ–æ–Ω—É–≤–∞–Ω–Ω—è —Ç–∞ –ø–æ–∫—Ä–∞—â–µ–Ω–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å–∞–º–∏
"""

import docx
import pymongo
from pymongo import MongoClient
from urllib.parse import quote_plus
from dateutil import parser
from datetime import datetime, timezone
import json
import sys
import re
from enum import Enum
import hashlib

# –†–Ø–î–û–ö –ü–Ü–î–ö–õ–Æ–ß–ï–ù–ù–Ø –î–û MONGODB ATLAS
username = quote_plus("test")
password = quote_plus("test")
MONGO_CONNECTION_STRING = f"mongodb+srv://{username}:{password}@clusterrd4u.7180sy4.mongodb.net/?retryWrites=true&w=majority&appName=ClusterRD4U"

# –ù–∞–∑–≤–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
DATABASE_NAME = "ua_admin_territory"

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —ñ–º–ø–æ—Ä—Ç—É
IMPORT_CONFIG = {
    'document_name': '–ü–µ—Ä–µ–ª—ñ–∫ 07052025',
    'document_date': '07.05.2025',  # –ë—ñ–ª—å—à —á–∏—Ç–∞–±–µ–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏
    'document_date_iso': '2025-05-07',  # ISO —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –ø–æ—Ç—Ä–µ–±
    'import_version': '1.0',
    'import_description': '–ü–µ—Ä—à–∏–π —ñ–º–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö –∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ü–µ—Ä–µ–ª—ñ–∫ 07052025 –≤—ñ–¥ 7 —Ç—Ä–∞–≤–Ω—è 2025 —Ä–æ–∫—É'
}

class TerritoryStatus(Enum):
    """–°—Ç–∞—Ç—É—Å–∏ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–π –∑–≥—ñ–¥–Ω–æ –∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º –ü–µ—Ä–µ–ª—ñ–∫ 07052025"""
    POSSIBLE_COMBAT = "1. –¢–µ—Ä–∏—Ç–æ—Ä—ñ—ó –º–æ–∂–ª–∏–≤–∏—Ö –±–æ–π–æ–≤–∏—Ö –¥—ñ–π"
    ACTIVE_COMBAT = "2. –¢–µ—Ä–∏—Ç–æ—Ä—ñ—ó –∞–∫—Ç–∏–≤–Ω–∏—Ö –±–æ–π–æ–≤–∏—Ö –¥—ñ–π"
    ACTIVE_COMBAT_WITH_RESOURCES = "3. –¢–µ—Ä–∏—Ç–æ—Ä—ñ—ó –∞–∫—Ç–∏–≤–Ω–∏—Ö –±–æ–π–æ–≤–∏—Ö –¥—ñ–π, –Ω–∞ —è–∫–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–æ–Ω—É—é—Ç—å –¥–µ—Ä–∂–∞–≤–Ω—ñ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω—ñ —Ä–µ—Å—É—Ä—Å–∏"
    TEMPORARILY_OCCUPIED = "–¢–∏–º—á–∞—Å–æ–≤–æ –æ–∫—É–ø–æ–≤–∞–Ω—ñ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó"

def connect_to_mongodb():
    """–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB Atlas"""
    try:
        print("üîå –ü—ñ–¥–∫–ª—é—á–∞—é—Å—è –¥–æ MongoDB Atlas...")
        client = MongoClient(MONGO_CONNECTION_STRING)
        client.admin.command('ping')
        print("‚úÖ –£—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MongoDB Atlas")
        return client
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB: {e}")
        sys.exit(1)

def create_import_session(client):
    """
    –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–µ—Å—ñ—ó —ñ–º–ø–æ—Ä—Ç—É –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è
    """
    db = client[DATABASE_NAME]
    import_collection = db['import_sessions']
    
    import_session = {
        'import_id': hashlib.md5(f"{IMPORT_CONFIG['document_name']}_{datetime.now().isoformat()}".encode()).hexdigest()[:12],
        'document_name': IMPORT_CONFIG['document_name'],
        'document_date': IMPORT_CONFIG['document_date'],  # –ß–∏—Ç–∞–±–µ–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
        'document_date_iso': IMPORT_CONFIG['document_date_iso'],  # ISO —Ñ–æ—Ä–º–∞—Ç
        'import_version': IMPORT_CONFIG['import_version'],
        'import_description': IMPORT_CONFIG['import_description'],
        'import_start_time': datetime.now(timezone.utc),
        'import_end_time': None,
        'status': 'in_progress',
        'total_processed': 0,
        'total_imported': 0,
        'total_errors': 0,
        'not_found_territories': [],
        'collections_processed': []
    }
    
    result = import_collection.insert_one(import_session)
    print(f"üìã –°—Ç–≤–æ—Ä–µ–Ω–æ —Å–µ—Å—ñ—é —ñ–º–ø–æ—Ä—Ç—É: {import_session['import_id']}")
    
    return import_session['import_id']

def update_import_session(client, import_id, updates):
    """
    –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–µ—Å—ñ—ó —ñ–º–ø–æ—Ä—Ç—É
    """
    db = client[DATABASE_NAME]
    import_collection = db['import_sessions']
    
    import_collection.update_one(
        {'import_id': import_id},
        {'$set': updates}
    )

def finalize_import_session(client, import_id, final_stats):
    """
    –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å–µ—Å—ñ—ó —ñ–º–ø–æ—Ä—Ç—É
    """
    db = client[DATABASE_NAME]
    import_collection = db['import_sessions']
    
    final_data = {
        'import_end_time': datetime.now(timezone.utc),
        'status': 'completed',
        **final_stats
    }
    
    import_collection.update_one(
        {'import_id': import_id},
        {'$set': final_data}
    )
    
    print(f"‚úÖ –°–µ—Å—ñ—è —ñ–º–ø–æ—Ä—Ç—É {import_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

def is_header_row(row_data):
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î —Ä—è–¥–æ–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –æ–±–ª–∞—Å—Ç—ñ/—Ä–∞–π–æ–Ω—É
    """
    if not row_data or len(row_data) < 2:
        return True
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–µ—Ä—à—ñ –¥–≤—ñ –∫–æ–ª–æ–Ω–∫–∏
    first_col = row_data[0].strip() if row_data[0] else ""
    second_col = row_data[1].strip() if len(row_data) > 1 and row_data[1] else ""
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ–±–ª–∞—Å—Ç–µ–π/—Ä–∞–π–æ–Ω—ñ–≤
    header_patterns = [
        r'^\d+\.\d*\.\s*[–ê-–Ø–Ü–á–Ñ\s]+–û–ë–õ–ê–°–¢–¨$',  # 1.1. –î–ù–Ü–ü–†–û–ü–ï–¢–†–û–í–°–¨–ö–ê –û–ë–õ–ê–°–¢–¨
        r'^\d+\.\s*[–ê-–Ø–Ü–á–Ñ\s]+–û–ë–õ–ê–°–¢–¨$',       # 1. –î–ù–Ü–ü–†–û–ü–ï–¢–†–û–í–°–¨–ö–ê –û–ë–õ–ê–°–¢–¨
        r'^\d+\.\s*–ê–í–¢–û–ù–û–ú–ù–ê\s+–†–ï–°–ü–£–ë–õ–Ü–ö–ê\s+–ö–†–ò–ú$',  # 1. –ê–í–¢–û–ù–û–ú–ù–ê –†–ï–°–ü–£–ë–õ–Ü–ö–ê –ö–†–ò–ú
        r'^\d+\.\s*–ú\.\s*[–ê-–Ø–Ü–á–Ñ\s]+$',        # 12. –ú. –°–ï–í–ê–°–¢–û–ü–û–õ–¨
        r'^[–ê-–Ø–Ü–á–Ñ\s]+—Ä–∞–π–æ–Ω$',                 # –ö—Ä–∏–≤–æ—Ä—ñ–∑—å–∫–∏–π —Ä–∞–π–æ–Ω
        r'^–ù–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è$',                      # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–ª–æ–Ω–∫–∏
        r'^–ö–æ–¥$',                               # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–ª–æ–Ω–∫–∏
        r'^–î–∞—Ç–∞\s+',                            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–∞—Ç
    ]
    
    for pattern in header_patterns:
        if re.match(pattern, first_col, re.IGNORECASE) or re.match(pattern, second_col, re.IGNORECASE):
            return True
    
    # –Ø–∫—â–æ –≤—Å—ñ –∫–æ–ª–æ–Ω–∫–∏ –æ–¥–Ω–∞–∫–æ–≤—ñ - —Ü–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    if len(row_data) >= 2 and all(col.strip() == first_col for col in row_data[:2]):
        return True
    
    return False

def is_valid_territory_code(code):
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î –∫–æ–¥ –≤–∞–ª—ñ–¥–Ω–∏–º –∫–æ–¥–æ–º —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó
    –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ: UA + 17 —Ü–∏—Ñ—Ä
    """
    if not code or not isinstance(code, str):
        return False
    
    # –ö–æ–¥ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó –º–∞—î —Ñ–æ—Ä–º–∞—Ç UA + 17 —Ü–∏—Ñ—Ä
    return re.match(r'^UA\d{17}$', code.strip())

def parse_date_safely(date_str):
    """
    –ë–µ–∑–ø–µ—á–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç–∏ –∑ –æ–±—Ä–æ–±–∫–æ—é —Ä—ñ–∑–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤
    """
    if not date_str or not isinstance(date_str, str):
        return None
    
    date_str = date_str.strip()
    if not date_str:
        return None
    
    # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤—ñ —Å–∏–º–≤–æ–ª–∏, –∞–ª–µ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–æ—á–∫–∏ —Ç–∞ —Å–ª–µ—à—ñ
    date_str = re.sub(r'[^\d./]', '', date_str)
    
    # –Ø–∫—â–æ —î –∫—ñ–ª—å–∫–∞ –¥–∞—Ç —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å, –±–µ—Ä–µ–º–æ –ø–µ—Ä—à—É
    if '\n' in date_str:
        date_str = date_str.split('\n')[0]
    
    # –†—ñ–∑–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏ –¥–∞—Ç
    date_formats = [
        '%d.%m.%Y',    # 27.09.2024
        '%d/%m/%Y',    # 27/09/2024
        '%d.%m.%y',    # 27.09.24
        '%d/%m/%y',    # 27/09/24
    ]
    
    for fmt in date_formats:
        try:
            return datetime.strptime(date_str, fmt)
        except ValueError:
            continue
    
    # –°–ø—Ä–æ–±—É—î–º–æ –ø–∞—Ä—Å–µ—Ä –∑ dateutil
    try:
        return parser.parse(date_str, dayfirst=True)
    except:
        return None

def parse_docx_tables_improved(filename):
    """
    –ü–æ–∫—Ä–∞—â–µ–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥ —Ç–∞–±–ª–∏—Ü—å –∑ DOCX –¥–æ–∫—É–º–µ–Ω—Ç–∞
    """
    try:
        doc = docx.Document(filename)
        print(f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–∫—Ä–∏—Ç–æ: {filename}")
        print(f"üìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–∞–±–ª–∏—Ü—å: {len(doc.tables)}")
        
        tables_data = []
        
        for table_idx, table in enumerate(doc.tables):
            print(f"\n=== –¢–ê–ë–õ–ò–¶–Ø {table_idx + 1} ===")
            
            if len(table.rows) == 0:
                print("–¢–∞–±–ª–∏—Ü—è –ø–æ—Ä–æ–∂–Ω—è")
                continue
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            headers = []
            if table.rows:
                header_row = table.rows[0]
                headers = [cell.text.strip() for cell in header_row.cells]
                print(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏: {headers}")
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤—ñ —ñ–Ω–¥–µ–∫—Å—É —Ç–∞–±–ª–∏—Ü—ñ
            if table_idx == 0:  # –¢–∞–±–ª–∏—Ü–∞ 1
                status = TerritoryStatus.POSSIBLE_COMBAT
            elif table_idx == 1:  # –¢–∞–±–ª–∏—Ü–∞ 2
                status = TerritoryStatus.ACTIVE_COMBAT
            elif table_idx == 2:  # –¢–∞–±–ª–∏—Ü–∞ 3
                status = TerritoryStatus.ACTIVE_COMBAT_WITH_RESOURCES
            elif table_idx in [3, 4]:  # –¢–∞–±–ª–∏—Ü—ñ 4, 5
                status = TerritoryStatus.TEMPORARILY_OCCUPIED
            else:
                status = None
            
            print(f"–°—Ç–∞—Ç—É—Å: {status.value if status else '–ù–µ–≤—ñ–¥–æ–º–∏–π'}")
            
            # –ó–±–∏—Ä–∞—î–º–æ –¥–∞–Ω—ñ –∑ —Ç–∞–±–ª–∏—Ü—ñ
            table_data = {
                'table_index': table_idx + 1,
                'status': status.value if status else '–ù–µ–≤—ñ–¥–æ–º–∏–π',
                'headers': headers,
                'valid_rows': []
            }
            
            # –û–±—Ä–æ–±–ª—è—î–º–æ –≤—Å—ñ —Ä—è–¥–∫–∏ –∫—Ä—ñ–º –∑–∞–≥–æ–ª–æ–≤–∫–∞
            for row_idx in range(1, len(table.rows)):
                row = table.rows[row_idx]
                row_data = [cell.text.strip() for cell in row.cells]
                
                # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ–±–ª–∞—Å—Ç–µ–π/—Ä–∞–π–æ–Ω—ñ–≤
                if is_header_row(row_data):
                    continue
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≤–∞–ª—ñ–¥–Ω–∏–π –∫–æ–¥ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó
                if len(row_data) >= 1 and is_valid_territory_code(row_data[0]):
                    table_data['valid_rows'].append(row_data)
            
            tables_data.append(table_data)
            print(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(table_data['valid_rows'])} –≤–∞–ª—ñ–¥–Ω–∏—Ö —Ä—è–¥–∫—ñ–≤")
        
        return tables_data
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥—É –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        return None

def find_territory_in_mongodb(client, territory_name, territory_code=None):
    """
    –ü–æ—à—É–∫ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó –≤ MongoDB
    """
    db = client[DATABASE_NAME]
    
    collections = [
        'level1_regions',
        'level2_raions', 
        'level3_hromadas',
        'level4_settlements',
        'level_additional_city_districts'
    ]
    
    for collection_name in collections:
        collection = db[collection_name]
        
        # –°–ø–æ—á–∞—Ç–∫—É —à—É–∫–∞—î–º–æ –∑–∞ –∫–æ–¥–æ–º, —è–∫—â–æ –≤—ñ–Ω —î
        if territory_code:
            result = collection.find_one({"_id": territory_code})
            if result:
                return result, collection_name
        
        # –ü–æ—à—É–∫ –∑–∞ —Ç–æ—á–Ω–∏–º —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è–º –Ω–∞–∑–≤–∏
        result = collection.find_one({"name": territory_name})
        if not result:
            # –ü–æ—à—É–∫ –∑–∞ —á–∞—Å—Ç–∫–æ–≤–∏–º —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è–º
            result = collection.find_one({"name": {"$regex": territory_name, "$options": "i"}})
        
        if result:
            return result, collection_name
    
    return None, None

def add_status_period_to_territory(client, territory_doc, collection_name, status, start_date, end_date, 
                                  territory_code=None, table_source=None, import_id=None):
    """
    –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–µ—Ä—ñ–æ–¥—É —Å—Ç–∞—Ç—É—Å—É –¥–æ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è–º
    """
    db = client[DATABASE_NAME]
    collection = db[collection_name]
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ–ª–µ —ñ—Å—Ç–æ—Ä—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Å—Ç–∞—Ç—É—Å—É
    if status == TerritoryStatus.TEMPORARILY_OCCUPIED.value:
        history_field = 'occupation_history'
    elif status in [TerritoryStatus.POSSIBLE_COMBAT.value, TerritoryStatus.ACTIVE_COMBAT.value, TerritoryStatus.ACTIVE_COMBAT_WITH_RESOURCES.value]:
        history_field = 'combat_history'
    else:
        history_field = 'status_history'
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å –ø—Ä–æ —Å—Ç–∞—Ç—É—Å –∑ –º–µ—Ç–∞–¥–∞–Ω–∏–º–∏ —ñ–º–ø–æ—Ä—Ç—É
    status_record = {
        'status': status,
        'start_date': start_date,
        'end_date': end_date,
        'source_document': IMPORT_CONFIG['document_name'],
        'document_date': IMPORT_CONFIG['document_date'],  # –ß–∏—Ç–∞–±–µ–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
        'document_date_iso': IMPORT_CONFIG['document_date_iso'],  # ISO —Ñ–æ—Ä–º–∞—Ç
        'import_id': import_id,
        'import_version': IMPORT_CONFIG['import_version'],
        'import_timestamp': datetime.now(timezone.utc),
        'table_source': table_source
    }
    
    if territory_code:
        status_record['territory_code'] = territory_code
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É —ñ—Å—Ç–æ—Ä—ñ—é
    if history_field in territory_doc:
        history = territory_doc[history_field]
    else:
        history = []
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ —ñ—Å–Ω—É—î –≤–∂–µ —Ç–∞–∫–∏–π –∑–∞–ø–∏—Å –∑ —Ü—ñ—î—ó —Å–µ—Å—ñ—ó —ñ–º–ø–æ—Ä—Ç—É
    existing_record = None
    for record in history:
        if (record.get('status') == status and 
            record.get('start_date') == start_date and
            record.get('import_id') == import_id):
            existing_record = record
            break
    
    if existing_record:
        print(f"‚ö†Ô∏è  –ó–∞–ø–∏—Å –≤–∂–µ —ñ—Å–Ω—É—î –¥–ª—è {territory_doc['name']} - —Å—Ç–∞—Ç—É—Å {status} (—ñ–º–ø–æ—Ä—Ç {import_id})")
        return False
    
    # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó
    history.append(status_record)
    
    # –û–Ω–æ–≤–ª—é—î–º–æ –¥–æ–∫—É–º–µ–Ω—Ç
    update_data = {
        "$set": {
            history_field: history,
            "current_status": status,
            "last_status_update": datetime.now(timezone.utc),
            "last_import_id": import_id,
            "last_import_version": IMPORT_CONFIG['import_version']
        }
    }
    
    if start_date:
        update_data["$set"]["status_start_date"] = start_date
    
    if end_date:
        update_data["$set"]["status_end_date"] = end_date
    
    collection.update_one({"_id": territory_doc["_id"]}, update_data)
    
    print(f"‚úÖ –î–æ–¥–∞–Ω–æ —Å—Ç–∞—Ç—É—Å '{status}' –¥–ª—è: {territory_doc['name']} (—ñ–º–ø–æ—Ä—Ç {import_id})")
    return True

def import_tables_data_improved(client, tables_data, import_id):
    """
    –ü–æ–∫—Ä–∞—â–µ–Ω–∏–π —ñ–º–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö –∑ —Ç–∞–±–ª–∏—Ü—å –≤ MongoDB –∑ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è–º
    """
    print(f"\nüöÄ –ü–æ—á–∏–Ω–∞—é —ñ–º–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö –≤ MongoDB (—Å–µ—Å—ñ—è: {import_id})...")
    
    total_imported = 0
    total_errors = 0
    not_found_territories = []
    
    for table_data in tables_data:
        table_index = table_data['table_index']
        status = table_data['status']
        headers = table_data['headers']
        valid_rows = table_data['valid_rows']
        
        print(f"\nüìä –û–±—Ä–æ–±–ª—è—é —Ç–∞–±–ª–∏—Ü—é {table_index} - {status}")
        print(f"üìã –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∞–ª—ñ–¥–Ω–∏—Ö —Ä—è–¥–∫—ñ–≤: {len(valid_rows)}")
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —ñ–Ω–¥–µ–∫—Å–∏ –∫–æ–ª–æ–Ω–æ–∫
        code_idx = 0  # –ö–æ–¥ –∑–∞–≤–∂–¥–∏ –ø–µ—Ä—à–∏–π
        name_idx = 1  # –ù–∞–∑–≤–∞ –∑–∞–≤–∂–¥–∏ –¥—Ä—É–≥–∞
        start_date_idx = 2  # –î–∞—Ç–∞ –ø–æ—á–∞—Ç–∫—É –∑–∞–≤–∂–¥–∏ —Ç—Ä–µ—Ç—è
        end_date_idx = 3  # –î–∞—Ç–∞ –∫—ñ–Ω—Ü—è –∑–∞–≤–∂–¥–∏ —á–µ—Ç–≤–µ—Ä—Ç–∞
        
        imported_in_table = 0
        errors_in_table = 0
        
        for row_idx, row_data in enumerate(valid_rows):
            if len(row_data) < 4:
                continue
            
            territory_code = row_data[code_idx] if len(row_data) > code_idx else ""
            territory_name = row_data[name_idx] if len(row_data) > name_idx else ""
            
            # –ü–∞—Ä—Å–∏–º–æ –¥–∞—Ç–∏
            start_date = None
            end_date = None
            
            try:
                if len(row_data) > start_date_idx and row_data[start_date_idx]:
                    start_date = parse_date_safely(row_data[start_date_idx])
                
                if len(row_data) > end_date_idx and row_data[end_date_idx]:
                    end_date = parse_date_safely(row_data[end_date_idx])
            except Exception as e:
                print(f"‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –¥–∞—Ç–∏ –¥–ª—è {territory_name}: {e}")
                errors_in_table += 1
                continue
            
            # –®—É–∫–∞—î–º–æ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—é –≤ MongoDB
            territory_doc, collection_name = find_territory_in_mongodb(client, territory_name, territory_code)
            
            if territory_doc:
                try:
                    success = add_status_period_to_territory(
                        client, 
                        territory_doc, 
                        collection_name, 
                        status, 
                        start_date, 
                        end_date,
                        territory_code=territory_code,
                        table_source=table_index,
                        import_id=import_id
                    )
                    
                    if success:
                        imported_in_table += 1
                        total_imported += 1
                    else:
                        errors_in_table += 1
                        total_errors += 1
                        
                except Exception as e:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É –¥–ª—è {territory_name}: {e}")
                    errors_in_table += 1
                    total_errors += 1
            else:
                not_found_territories.append({
                    'name': territory_name,
                    'code': territory_code,
                    'status': status,
                    'table': table_index
                })
                errors_in_table += 1
                total_errors += 1
        
        print(f"üìä –¢–∞–±–ª–∏—Ü—è {table_index}: —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ {imported_in_table}, –ø–æ–º–∏–ª–æ–∫ {errors_in_table}")
    
    # –í–∏–≤–æ–¥–∏–º–æ –ø—ñ–¥—Å—É–º–∫–∏
    print(f"\nüéØ –ü–Ü–î–°–£–ú–ö–ò –Ü–ú–ü–û–†–¢–£:")
    print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ: {total_imported}")
    print(f"‚ùå –ü–æ–º–∏–ª–æ–∫: {total_errors}")
    
    if not_found_territories:
        print(f"\n‚ö†Ô∏è  –ù–ï –ó–ù–ê–ô–î–ï–ù–Ü –¢–ï–†–ò–¢–û–†–Ü–á ({len(not_found_territories)}):")
        for territory in not_found_territories[:10]:  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 10
            print(f"  ‚Ä¢ {territory['name']} (–∫–æ–¥: {territory['code']}) - {territory['status']}")
        
        if len(not_found_territories) > 10:
            print(f"  ... —Ç–∞ —â–µ {len(not_found_territories) - 10} —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–π")
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å–ø–∏—Å–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏—Ö —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–π
        filename = f'not_found_territories_{import_id}.json'
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(not_found_territories, f, ensure_ascii=False, indent=2, default=str)
        print(f"üìÑ –°–ø–∏—Å–æ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ {filename}")
    
    return total_imported, total_errors, not_found_territories

def show_import_statistics(client):
    """
    –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—ñ—Å–ª—è —ñ–º–ø–æ—Ä—Ç—É
    """
    db = client[DATABASE_NAME]
    
    collections = [
        'level1_regions',
        'level2_raions', 
        'level3_hromadas',
        'level4_settlements',
        'level_additional_city_districts'
    ]
    
    print("\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–Ü–°–õ–Ø –Ü–ú–ü–û–†–¢–£:")
    print("-" * 40)
    print(f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç: {IMPORT_CONFIG['document_name']}")
    print(f"üìÖ –î–∞—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {IMPORT_CONFIG['document_date']}")
    print("-" * 40)
    
    total_with_status = 0
    status_counts = {}
    document_dates = set()
    
    for collection_name in collections:
        collection = db[collection_name]
        
        # –¢–µ—Ä–∏—Ç–æ—Ä—ñ—ó –∑ —ñ—Å—Ç–æ—Ä—ñ—î—é —Å—Ç–∞—Ç—É—Å—ñ–≤
        with_status = collection.count_documents({
            "$or": [
                {"occupation_history": {"$exists": True}},
                {"combat_history": {"$exists": True}},
                {"status_history": {"$exists": True}}
            ]
        })
        total_with_status += with_status
        
        print(f"{collection_name}: {with_status} —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–π –∑—ñ —Å—Ç–∞—Ç—É—Å–∞–º–∏")
        
        # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ —Å—Ç–∞—Ç—É—Å–∞—Ö —Ç–∞ –∑–±—ñ—Ä –¥–∞—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
        territories = collection.find({
            "$or": [
                {"occupation_history": {"$exists": True}},
                {"combat_history": {"$exists": True}},
                {"status_history": {"$exists": True}}
            ]
        })
        
        for territory in territories:
            for history_field in ['occupation_history', 'combat_history', 'status_history']:
                if history_field in territory:
                    for period in territory[history_field]:
                        status = period.get('status', '–ù–µ–≤—ñ–¥–æ–º–∏–π')
                        if status not in status_counts:
                            status_counts[status] = 0
                        status_counts[status] += 1
                        
                        # –ó–±–∏—Ä–∞—î–º–æ –¥–∞—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
                        if 'document_date' in period:
                            document_dates.add(period['document_date'])
    
    print(f"\nüìä –ó–ê–ì–ê–õ–¨–ù–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"–¢–µ—Ä–∏—Ç–æ—Ä—ñ–π –∑—ñ —Å—Ç–∞—Ç—É—Å–∞–º–∏: {total_with_status}")
    
    if document_dates:
        print(f"\nüìÖ –î–ê–¢–ò –î–û–ö–£–ú–ï–ù–¢–Ü–í –£ –ë–ê–ó–Ü:")
        for doc_date in sorted(document_dates):
            print(f"  ‚Ä¢ {doc_date}")
    
    print(f"\nüìã –†–û–ó–ü–û–î–Ü–õ –ü–û –°–¢–ê–¢–£–°–ê–•:")
    for status, count in sorted(status_counts.items()):
        print(f"  {status}: {count}")

def show_import_history(client):
    """
    –ü–æ–∫–∞–∑ —ñ—Å—Ç–æ—Ä—ñ—ó —ñ–º–ø–æ—Ä—Ç—ñ–≤
    """
    db = client[DATABASE_NAME]
    import_collection = db['import_sessions']
    
    print("\nüìö –Ü–°–¢–û–†–Ü–Ø –Ü–ú–ü–û–†–¢–Ü–í:")
    print("-" * 80)
    
    imports = list(import_collection.find().sort('import_start_time', -1))
    
    if not imports:
        print("–Ü—Å—Ç–æ—Ä—ñ—è —ñ–º–ø–æ—Ä—Ç—ñ–≤ –ø–æ—Ä–æ–∂–Ω—è")
        return
    
    for imp in imports:
        status_icon = "‚úÖ" if imp.get('status') == 'completed' else "üîÑ" if imp.get('status') == 'in_progress' else "‚ùå"
        
        print(f"{status_icon} {imp['import_id']} - {imp['document_name']} ({imp['document_date']})")
        print(f"    –í–µ—Ä—Å—ñ—è: {imp['import_version']}")
        print(f"    –ü–æ—á–∞—Ç–æ–∫: {imp['import_start_time'].strftime('%Y-%m-%d %H:%M:%S')}")
        
        if imp.get('import_end_time'):
            duration = imp['import_end_time'] - imp['import_start_time']
            print(f"    –ö—ñ–Ω–µ—Ü—å: {imp['import_end_time'].strftime('%Y-%m-%d %H:%M:%S')} (—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {duration})")
        
        if imp.get('total_imported') is not None:
            print(f"    –Ü–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ: {imp['total_imported']}, –ø–æ–º–∏–ª–æ–∫: {imp.get('total_errors', 0)}")
        
        if imp.get('import_description'):
            print(f"    –û–ø–∏—Å: {imp['import_description']}")
        
        print()

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print("üöÄ –†–û–ó–®–ò–†–ï–ù–ò–ô –Ü–ú–ü–û–†–¢ –î–ê–ù–ò–• –ó –ü–ï–†–ï–õ–Ü–ö–£")
    print("=" * 60)
    print(f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç: {IMPORT_CONFIG['document_name']}")
    print(f"üìÖ –î–∞—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {IMPORT_CONFIG['document_date']}")
    print(f"üî¢ –í–µ—Ä—Å—ñ—è —ñ–º–ø–æ—Ä—Ç—É: {IMPORT_CONFIG['import_version']}")
    print("=" * 60)
    
    # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è –¥–æ MongoDB
    client = connect_to_mongodb()
    
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–µ—Å—ñ—é —ñ–º–ø–æ—Ä—Ç—É
        import_id = create_import_session(client)
        
        # –ü–∞—Ä—Å–∏–º–æ –¥–æ–∫—É–º–µ–Ω—Ç
        filename = "–ü–µ—Ä–µ–ª–∏–∫ 07052025.docx"
        print(f"\nüìÑ –ü–∞—Ä—Å–∏–Ω–≥ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {filename}")
        
        tables_data = parse_docx_tables_improved(filename)
        if not tables_data:
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
            return
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å–µ—Å—ñ—é –∑ –∫—ñ–ª—å–∫—ñ—Å—Ç—é —Ç–∞–±–ª–∏—Ü—å
        update_import_session(client, import_id, {
            'tables_count': len(tables_data),
            'total_rows': sum(len(table['valid_rows']) for table in tables_data)
        })
        
        # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç—É
        print(f"\nüìã –ü—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –¥–æ —ñ–º–ø–æ—Ä—Ç—É:")
        total_valid_rows = 0
        for table in tables_data:
            valid_count = len(table['valid_rows'])
            total_valid_rows += valid_count
            print(f"  –¢–∞–±–ª–∏—Ü—è {table['table_index']}: {table['status']} - {valid_count} –≤–∞–ª—ñ–¥–Ω–∏—Ö —Ä—è–¥–∫—ñ–≤")
        
        print(f"üìä –ó–∞–≥–∞–ª–æ–º –≤–∞–ª—ñ–¥–Ω–∏—Ö —Ä—è–¥–∫—ñ–≤: {total_valid_rows}")
        
        confirm = input("\nü§î –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —ñ–º–ø–æ—Ä—Ç? (y/N): ").strip().lower()
        if confirm != 'y':
            print("‚ùå –Ü–º–ø–æ—Ä—Ç —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
            update_import_session(client, import_id, {'status': 'cancelled'})
            return
        
        # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –¥–∞–Ω—ñ
        total_imported, total_errors, not_found = import_tables_data_improved(client, tables_data, import_id)
        
        # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Å–µ—Å—ñ—é
        finalize_import_session(client, import_id, {
            'total_processed': total_valid_rows,
            'total_imported': total_imported,
            'total_errors': total_errors,
            'not_found_territories': not_found
        })
        
        # –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        show_import_statistics(client)
        
        # –ü–æ–∫–∞–∑—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é —ñ–º–ø–æ—Ä—Ç—ñ–≤
        show_import_history(client)
        
        print(f"\n‚úÖ –Ü–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print(f"üìä –£—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ: {total_imported}")
        print(f"‚ùå –ü–æ–º–∏–ª–æ–∫: {total_errors}")
        print(f"üÜî ID —Å–µ—Å—ñ—ó —ñ–º–ø–æ—Ä—Ç—É: {import_id}")
        
    except Exception as e:
        print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {e}")
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å–µ—Å—ñ—é –∑ –ø–æ–º–∏–ª–∫–æ—é
        if 'import_id' in locals():
            update_import_session(client, import_id, {
                'status': 'error',
                'error_message': str(e)
            })
    
    finally:
        client.close()
        print("\nüîå –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ MongoDB –∑–∞–∫—Ä–∏—Ç–æ")

if __name__ == "__main__":
    main() 