#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ü–µ—Ä–µ–ª—ñ–∫ 07052025
"""

import docx
import re

def analyze_document_structure(filename):
    """
    –ê–Ω–∞–ª—ñ–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    """
    try:
        doc = docx.Document(filename)
        print(f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç: {filename}")
        print(f"üìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–∞–±–ª–∏—Ü—å: {len(doc.tables)}")
        
        for table_idx, table in enumerate(doc.tables):
            print(f"\n=== –¢–ê–ë–õ–ò–¶–Ø {table_idx + 1} ===")
            print(f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—è–¥–∫—ñ–≤: {len(table.rows)}")
            
            if len(table.rows) == 0:
                print("–¢–∞–±–ª–∏—Ü—è –ø–æ—Ä–æ–∂–Ω—è")
                continue
            
            # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –ø–µ—Ä—à—ñ 10 —Ä—è–¥–∫—ñ–≤
            for row_idx in range(min(10, len(table.rows))):
                row = table.rows[row_idx]
                row_data = [cell.text.strip() for cell in row.cells]
                
                print(f"\n–†—è–¥–æ–∫ {row_idx + 1}:")
                print(f"  –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–º—ñ—Ä–æ–∫: {len(row_data)}")
                print(f"  –î–∞–Ω—ñ: {row_data}")
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–æ–¥ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó
                if row_data and len(row_data) > 0:
                    first_cell = row_data[0]
                    if re.match(r'^UA\d{12}$', first_cell):
                        print(f"  ‚úÖ –í–∞–ª—ñ–¥–Ω–∏–π –∫–æ–¥ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó: {first_cell}")
                    else:
                        print(f"  ‚ùå –ù–µ –≤–∞–ª—ñ–¥–Ω–∏–π –∫–æ–¥: {first_cell}")
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –¥–∞—Ç–∏
                if len(row_data) >= 3:
                    date_cells = row_data[2:4]
                    for i, date_cell in enumerate(date_cells):
                        if date_cell and re.search(r'\d{2}[./]\d{2}[./]\d{4}', date_cell):
                            print(f"  üìÖ –î–∞—Ç–∞ –≤ –∫–æ–º—ñ—Ä—Ü—ñ {i+3}: {date_cell}")
                        elif date_cell:
                            print(f"  ‚ùì –ö–æ–º—ñ—Ä–∫–∞ {i+3}: {date_cell}")
            
            # –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–¥–∞—Ö —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–π
            print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ê–ë–õ–ò–¶–Ü {table_idx + 1}:")
            valid_codes = 0
            total_rows = 0
            
            for row_idx in range(1, len(table.rows)):  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
                row = table.rows[row_idx]
                row_data = [cell.text.strip() for cell in row.cells]
                
                if row_data and len(row_data) > 0:
                    total_rows += 1
                    first_cell = row_data[0]
                    if re.match(r'^UA\d{12}$', first_cell):
                        valid_codes += 1
            
            print(f"  –í—Å—å–æ–≥–æ —Ä—è–¥–∫—ñ–≤ (–±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞): {total_rows}")
            print(f"  –í–∞–ª—ñ–¥–Ω–∏—Ö –∫–æ–¥—ñ–≤: {valid_codes}")
            print(f"  –í—ñ–¥—Å–æ—Ç–æ–∫ –≤–∞–ª—ñ–¥–Ω–∏—Ö: {valid_codes/total_rows*100:.1f}%" if total_rows > 0 else "  –í—ñ–¥—Å–æ—Ç–æ–∫ –≤–∞–ª—ñ–¥–Ω–∏—Ö: 0%")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")

def test_regex_patterns():
    """
    –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ä–µ–≥—É–ª—è—Ä–Ω–∏—Ö –≤–∏—Ä–∞–∑—ñ–≤
    """
    print("\nüß™ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –†–ï–ì–£–õ–Ø–†–ù–ò–• –í–ò–†–ê–ó–Ü–í:")
    
    test_codes = [
        "UA12060090000074553",
        "UA12060130000012028", 
        "–ö—Ä–∏–≤–æ—Ä—ñ–∑—å–∫–∏–π —Ä–∞–π–æ–Ω",
        "1. –î–ù–Ü–ü–†–û–ü–ï–¢–†–û–í–°–¨–ö–ê –û–ë–õ–ê–°–¢–¨",
        "12. –ú. –°–ï–í–ê–°–¢–û–ü–û–õ–¨",
        "–ù–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è",
        "–ö–æ–¥"
    ]
    
    for test_code in test_codes:
        is_valid = re.match(r'^UA\d{12}$', test_code)
        print(f"  {test_code}: {'‚úÖ –í–∞–ª—ñ–¥–Ω–∏–π' if is_valid else '‚ùå –ù–µ –≤–∞–ª—ñ–¥–Ω–∏–π'}")
    
    # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
    print("\nüìã –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ó–ê–ì–û–õ–û–í–ö–Ü–í:")
    header_patterns = [
        r'^\d+\.\s*[–ê-–Ø–Ü–á–Ñ\s]+–û–ë–õ–ê–°–¢–¨$',
        r'^\d+\.\s*–ú\.\s*[–ê-–Ø–Ü–á–Ñ\s]+$',
        r'^[–ê-–Ø–Ü–á–Ñ\s]+—Ä–∞–π–æ–Ω$',
        r'^–ù–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è$',
        r'^–ö–æ–¥$',
        r'^–î–∞—Ç–∞\s+'
    ]
    
    test_headers = [
        "1. –î–ù–Ü–ü–†–û–ü–ï–¢–†–û–í–°–¨–ö–ê –û–ë–õ–ê–°–¢–¨",
        "12. –ú. –°–ï–í–ê–°–¢–û–ü–û–õ–¨", 
        "–ö—Ä–∏–≤–æ—Ä—ñ–∑—å–∫–∏–π —Ä–∞–π–æ–Ω",
        "–ù–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è",
        "–ö–æ–¥",
        "–î–∞—Ç–∞ –ø–æ—á–∞—Ç–∫—É"
    ]
    
    for header in test_headers:
        is_header = False
        for pattern in header_patterns:
            if re.match(pattern, header, re.IGNORECASE):
                is_header = True
                break
        print(f"  {header}: {'üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫' if is_header else 'üìÑ –î–∞–Ω—ñ'}")

if __name__ == "__main__":
    print("üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê –î–û–ö–£–ú–ï–ù–¢–ê –ü–ï–†–ï–õ–Ü–ö 07052025")
    print("=" * 50)
    
    filename = "–ü–µ—Ä–µ–ª–∏–∫ 07052025.docx"
    analyze_document_structure(filename)
    test_regex_patterns() 