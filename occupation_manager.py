#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ –æ–∫—É–ø–∞—Ü—ñ—é —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–π
–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 2025
"""

import pandas as pd
import pymongo
from pymongo import MongoClient
import sys
import os
from urllib.parse import quote_plus
from dateutil import parser
from datetime import datetime, date
import json

# –†–Ø–î–û–ö –ü–Ü–î–ö–õ–Æ–ß–ï–ù–ù–Ø –î–û MONGODB ATLAS
username = quote_plus("test")
password = quote_plus("test")
MONGO_CONNECTION_STRING = f"mongodb+srv://{username}:{password}@clusterrd4u.7180sy4.mongodb.net/?retryWrites=true&w=majority&appName=ClusterRD4U"

# –ù–∞–∑–≤–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
DATABASE_NAME = "ua_admin_territory"

def connect_to_mongodb():
    """–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB Atlas"""
    try:
        print("üîå –ü—ñ–¥–∫–ª—é—á–∞—é—Å—è –¥–æ MongoDB Atlas...")
        client = MongoClient(MONGO_CONNECTION_STRING)
        client.admin.command('ping')
        print("‚úÖ –£—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MongoDB Atlas")
        return client
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB: {e}")
        sys.exit(1)

def get_occupation_status_on_date(client, query_date):
    """
    –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –æ–∫—É–ø–∞—Ü—ñ—ó –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –¥–∞—Ç—É
    """
    db = client[DATABASE_NAME]
    
    collections = [
        'level1_regions',
        'level2_raions', 
        'level3_hromadas',
        'level4_settlements',
        'level_additional_city_districts'
    ]
    
    occupied_territories = []
    
    for collection_name in collections:
        collection = db[collection_name]
        
        # –®—É–∫–∞—î–º–æ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó, —è–∫—ñ –±—É–ª–∏ –æ–∫—É–ø–æ–≤–∞–Ω—ñ –Ω–∞ –≤–∫–∞–∑–∞–Ω—É –¥–∞—Ç—É
        pipeline = [
            {
                "$match": {
                    "occupation_history": {"$exists": True}
                }
            },
            {
                "$addFields": {
                    "occupation_status_on_date": {
                        "$filter": {
                            "input": "$occupation_history",
                            "as": "period",
                            "cond": {
                                "$and": [
                                    {
                                        "$lte": [
                                            "$$period.start_date",
                                            query_date
                                        ]
                                    },
                                    {
                                        "$or": [
                                            {"$eq": ["$$period.end_date", None]},
                                            {"$gte": ["$$period.end_date", query_date]}
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                }
            },
            {
                "$match": {
                    "occupation_status_on_date": {"$ne": []}
                }
            }
        ]
        
        results = list(collection.aggregate(pipeline))
        
        for result in results:
            occupied_territories.append({
                'name': result['name'],
                'category': result['category'],
                'collection': collection_name,
                'occupation_periods': result['occupation_status_on_date']
            })
    
    return occupied_territories

def get_territory_occupation_history(client, territory_name):
    """
    –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤–Ω–æ—ó —ñ—Å—Ç–æ—Ä—ñ—ó –æ–∫—É–ø–∞—Ü—ñ—ó –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó
    """
    db = client[DATABASE_NAME]
    
    collections = [
        'level1_regions',
        'level2_raions', 
        'level3_hromadas',
        'level4_settlements',
        'level_additional_city_districts'
    ]
    
    for collection_name in collections:
        collection = db[collection_name]
        
        # –ü–æ—à—É–∫ –∑–∞ —Ç–æ—á–Ω–∏–º —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è–º –Ω–∞–∑–≤–∏
        result = collection.find_one({"name": territory_name})
        if not result:
            # –ü–æ—à—É–∫ –∑–∞ —á–∞—Å—Ç–∫–æ–≤–∏–º —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è–º
            result = collection.find_one({"name": {"$regex": territory_name, "$options": "i"}})
        
        if result and 'occupation_history' in result:
            return result, collection_name
    
    return None, None

def add_occupation_period(client, territory_name, start_date, end_date=None, status="–¢–∏–º—á–∞—Å–æ–≤–æ –æ–∫—É–ø–æ–≤–∞–Ω–∞"):
    """
    –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É –æ–∫—É–ø–∞—Ü—ñ—ó –¥–ª—è —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó
    """
    db = client[DATABASE_NAME]
    
    # –®—É–∫–∞—î–º–æ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—é
    territory_doc, collection_name = get_territory_occupation_history(client, territory_name)
    
    if not territory_doc:
        print(f"‚ùå –¢–µ—Ä–∏—Ç–æ—Ä—ñ—é '{territory_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return False
    
    collection = db[collection_name]
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å –ø—Ä–æ –æ–∫—É–ø–∞—Ü—ñ—é
    occupation_record = {
        'start_date': start_date,
        'end_date': end_date,
        'status': status,
        'updated_at': datetime.now()
    }
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É —ñ—Å—Ç–æ—Ä—ñ—é –æ–∫—É–ø–∞—Ü—ñ—ó
    if 'occupation_history' in territory_doc:
        occupation_history = territory_doc['occupation_history']
    else:
        occupation_history = []
    
    # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó
    occupation_history.append(occupation_record)
    
    # –û–Ω–æ–≤–ª—é—î–º–æ –¥–æ–∫—É–º–µ–Ω—Ç
    update_data = {
        "$set": {
            "occupation_history": occupation_history,
            "current_occupation_status": status,
            "last_occupation_update": datetime.now()
        }
    }
    
    if start_date:
        update_data["$set"]["occupation_start_date"] = start_date
    
    if end_date:
        update_data["$set"]["occupation_end_date"] = end_date
    
    collection.update_one({"_id": territory_doc["_id"]}, update_data)
    
    print(f"‚úÖ –î–æ–¥–∞–Ω–æ –ø–µ—Ä—ñ–æ–¥ –æ–∫—É–ø–∞—Ü—ñ—ó –¥–ª—è: {territory_doc['name']}")
    return True

def export_occupation_data_to_csv(client, output_file="occupation_data.csv"):
    """
    –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö –ø—Ä–æ –æ–∫—É–ø–∞—Ü—ñ—é –≤ CSV —Ñ–∞–π–ª
    """
    db = client[DATABASE_NAME]
    
    collections = [
        'level1_regions',
        'level2_raions', 
        'level3_hromadas',
        'level4_settlements',
        'level_additional_city_districts'
    ]
    
    all_data = []
    
    for collection_name in collections:
        collection = db[collection_name]
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó –∑ —ñ—Å—Ç–æ—Ä—ñ—î—é –æ–∫—É–ø–∞—Ü—ñ—ó
        territories = collection.find({"occupation_history": {"$exists": True}})
        
        for territory in territories:
            for period in territory['occupation_history']:
                all_data.append({
                    'territory_name': territory['name'],
                    'category': territory['category'],
                    'collection': collection_name,
                    'start_date': period['start_date'].strftime('%d.%m.%Y') if period['start_date'] else '',
                    'end_date': period['end_date'].strftime('%d.%m.%Y') if period['end_date'] else '',
                    'status': period['status'],
                    'updated_at': period['updated_at'].strftime('%d.%m.%Y %H:%M:%S') if 'updated_at' in period else ''
                })
    
    if all_data:
        df = pd.DataFrame(all_data)
        df.to_csv(output_file, index=False, encoding='utf-8')
        print(f"‚úÖ –ï–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ {len(all_data)} –∑–∞–ø–∏—Å—ñ–≤ –≤ {output_file}")
    else:
        print("‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É")

def show_menu():
    """–ü–æ–∫–∞–∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    print("\n" + "=" * 50)
    print("üèõÔ∏è  –ú–ï–ù–ï–î–ñ–ï–† –î–ê–ù–ò–• –ü–†–û –û–ö–£–ü–ê–¶–Ü–Æ –¢–ï–†–ò–¢–û–†–Ü–ô")
    print("=" * 50)
    print("1. üîç –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –æ–∫—É–ø–∞—Ü—ñ—ó –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –¥–∞—Ç—É")
    print("2. üìã –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –æ–∫—É–ø–∞—Ü—ñ—ó —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó")
    print("3. ‚ûï –î–æ–¥–∞—Ç–∏ –ø–µ—Ä—ñ–æ–¥ –æ–∫—É–ø–∞—Ü—ñ—ó")
    print("4. üìä –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö –≤ CSV")
    print("5. üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–∫—É–ø–∞—Ü—ñ—ó")
    print("0. üö™ –í–∏—Ö—ñ–¥")
    print("=" * 50)

def show_occupation_statistics(client):
    """
    –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–∫—É–ø–∞—Ü—ñ—ó
    """
    db = client[DATABASE_NAME]
    
    collections = [
        'level1_regions',
        'level2_raions', 
        'level3_hromadas',
        'level4_settlements',
        'level_additional_city_districts'
    ]
    
    total_territories = 0
    occupied_territories = 0
    total_occupation_periods = 0
    
    print("\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ö–£–ü–ê–¶–Ü–á:")
    print("-" * 30)
    
    for collection_name in collections:
        collection = db[collection_name]
        
        # –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–π
        total_in_collection = collection.count_documents({})
        total_territories += total_in_collection
        
        # –¢–µ—Ä–∏—Ç–æ—Ä—ñ—ó –∑ —ñ—Å—Ç–æ—Ä—ñ—î—é –æ–∫—É–ø–∞—Ü—ñ—ó
        occupied_in_collection = collection.count_documents({"occupation_history": {"$exists": True}})
        occupied_territories += occupied_in_collection
        
        # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –ø–µ—Ä—ñ–æ–¥—ñ–≤ –æ–∫—É–ø–∞—Ü—ñ—ó
        territories_with_history = collection.find({"occupation_history": {"$exists": True}})
        periods_in_collection = 0
        for territory in territories_with_history:
            periods_in_collection += len(territory['occupation_history'])
        total_occupation_periods += periods_in_collection
        
        print(f"{collection_name}:")
        print(f"  –ó–∞–≥–∞–ª–æ–º —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–π: {total_in_collection}")
        print(f"  –ó —ñ—Å—Ç–æ—Ä—ñ—î—é –æ–∫—É–ø–∞—Ü—ñ—ó: {occupied_in_collection}")
        print(f"  –ü–µ—Ä—ñ–æ–¥—ñ–≤ –æ–∫—É–ø–∞—Ü—ñ—ó: {periods_in_collection}")
        print()
    
    print(f"üìä –ó–ê–ì–ê–õ–¨–ù–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"  –ó–∞–≥–∞–ª–æ–º —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–π: {total_territories}")
    print(f"  –ó —ñ—Å—Ç–æ—Ä—ñ—î—é –æ–∫—É–ø–∞—Ü—ñ—ó: {occupied_territories}")
    print(f"  –ó–∞–≥–∞–ª–æ–º –ø–µ—Ä—ñ–æ–¥—ñ–≤ –æ–∫—É–ø–∞—Ü—ñ—ó: {total_occupation_periods}")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print("üöÄ –Ü–ù–¢–ï–†–ê–ö–¢–ò–í–ù–ò–ô –ú–ï–ù–ï–î–ñ–ï–† –î–ê–ù–ò–• –ü–†–û –û–ö–£–ü–ê–¶–Ü–Æ")
    
    # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è –¥–æ MongoDB
    client = connect_to_mongodb()
    
    while True:
        show_menu()
        
        try:
            choice = input("–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é (0-5): ").strip()
            
            if choice == "0":
                print("üëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
                break
                
            elif choice == "1":
                date_str = input("–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É (—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–†–†–†–†): ").strip()
                try:
                    query_date = parser.parse(date_str, dayfirst=True)
                    occupied_territories = get_occupation_status_on_date(client, query_date)
                    
                    print(f"\nüîç –¢–µ—Ä–∏—Ç–æ—Ä—ñ—ó, –æ–∫—É–ø–æ–≤–∞–Ω—ñ –Ω–∞ {query_date.strftime('%d.%m.%Y')}:")
                    if occupied_territories:
                        for territory in occupied_territories:
                            print(f"  ‚Ä¢ {territory['name']} ({territory['category']})")
                            for period in territory['occupation_periods']:
                                start_str = period['start_date'].strftime('%d.%m.%Y') if period['start_date'] else '–Ω/–¥'
                                end_str = period['end_date'].strftime('%d.%m.%Y') if period['end_date'] else '–Ω/–¥'
                                print(f"    –ü–µ—Ä—ñ–æ–¥: {start_str} - {end_str} ({period['status']})")
                    else:
                        print("  –ù–µ–º–∞—î –æ–∫—É–ø–æ–≤–∞–Ω–∏—Ö —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–π –Ω–∞ —Ü—é –¥–∞—Ç—É")
                        
                except Exception as e:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –¥–∞—Ç–∏: {e}")
                    
            elif choice == "2":
                territory_name = input("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó: ").strip()
                territory_doc, collection_name = get_territory_occupation_history(client, territory_name)
                
                if territory_doc:
                    print(f"\nüìã –Ü—Å—Ç–æ—Ä—ñ—è –æ–∫—É–ø–∞—Ü—ñ—ó –¥–ª—è '{territory_doc['name']}':")
                    for i, period in enumerate(territory_doc['occupation_history'], 1):
                        start_str = period['start_date'].strftime('%d.%m.%Y') if period['start_date'] else '–Ω/–¥'
                        end_str = period['end_date'].strftime('%d.%m.%Y') if period['end_date'] else '–Ω/–¥'
                        print(f"  {i}. {start_str} - {end_str} ({period['status']})")
                else:
                    print(f"‚ùå –¢–µ—Ä–∏—Ç–æ—Ä—ñ—é '{territory_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–µ–º–∞—î —ñ—Å—Ç–æ—Ä—ñ—ó –æ–∫—É–ø–∞—Ü—ñ—ó")
                    
            elif choice == "3":
                territory_name = input("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó: ").strip()
                start_date_str = input("–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –ø–æ—á–∞—Ç–∫—É –æ–∫—É–ø–∞—Ü—ñ—ó (–î–î.–ú–ú.–†–†–†–†): ").strip()
                end_date_str = input("–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –∫—ñ–Ω—Ü—è –æ–∫—É–ø–∞—Ü—ñ—ó (–î–î.–ú–ú.–†–†–†–†, –∞–±–æ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫—É): ").strip()
                status = input("–í–≤–µ–¥—ñ—Ç—å —Å—Ç–∞—Ç—É—Å (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º '–¢–∏–º—á–∞—Å–æ–≤–æ –æ–∫—É–ø–æ–≤–∞–Ω–∞'): ").strip()
                
                if not status:
                    status = "–¢–∏–º—á–∞—Å–æ–≤–æ –æ–∫—É–ø–æ–≤–∞–Ω–∞"
                
                try:
                    start_date = parser.parse(start_date_str, dayfirst=True)
                    end_date = None
                    if end_date_str:
                        end_date = parser.parse(end_date_str, dayfirst=True)
                    
                    add_occupation_period(client, territory_name, start_date, end_date, status)
                    
                except Exception as e:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –¥–∞—Ç–∏: {e}")
                    
            elif choice == "4":
                output_file = input("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ñ–∞–π–ª—É –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 'occupation_data.csv'): ").strip()
                if not output_file:
                    output_file = "occupation_data.csv"
                export_occupation_data_to_csv(client, output_file)
                
            elif choice == "5":
                show_occupation_statistics(client)
                
            else:
                print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
                
        except KeyboardInterrupt:
            print("\nüëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
            break
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
    
    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è
    client.close()
    print("üîå –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ MongoDB –∑–∞–∫—Ä–∏—Ç–æ")

if __name__ == "__main__":
    main() 