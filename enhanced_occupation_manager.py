#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–†–æ–∑—à–∏—Ä–µ–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ –æ–∫—É–ø–∞—Ü—ñ—é —Ç–∞ –±–æ–π–æ–≤—ñ –¥—ñ—ó —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–π
–ü—ñ–¥—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç—É—Å–∏ –∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ "–ü–µ—Ä–µ–ª—ñ–∫ 07052025"
–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 2025
"""

import pandas as pd
import pymongo
from pymongo import MongoClient
import sys
import os
from urllib.parse import quote_plus
from dateutil import parser
from datetime import datetime, date
import json
from enum import Enum

# –†–Ø–î–û–ö –ü–Ü–î–ö–õ–Æ–ß–ï–ù–ù–Ø –î–û MONGODB ATLAS
username = quote_plus("test")
password = quote_plus("test")
MONGO_CONNECTION_STRING = f"mongodb+srv://{username}:{password}@clusterrd4u.7180sy4.mongodb.net/?retryWrites=true&w=majority&appName=ClusterRD4U"

# –ù–∞–∑–≤–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
DATABASE_NAME = "ua_admin_territory"

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
DOCUMENT_CONFIG = {
    'document_name': '–ü–µ—Ä–µ–ª—ñ–∫ 07052025',
    'document_date': '07.05.2025',  # –ß–∏—Ç–∞–±–µ–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏
    'document_date_iso': '2025-05-07',  # ISO —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –ø–æ—Ç—Ä–µ–±
    'document_description': '–î–æ–∫—É–º–µ–Ω—Ç –ü–µ—Ä–µ–ª—ñ–∫ 07052025 –≤—ñ–¥ 7 —Ç—Ä–∞–≤–Ω—è 2025 —Ä–æ–∫—É'
}

class TerritoryStatus(Enum):
    """–°—Ç–∞—Ç—É—Å–∏ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–π –∑–≥—ñ–¥–Ω–æ –∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º –ü–µ—Ä–µ–ª—ñ–∫ 07052025"""
    POSSIBLE_COMBAT = "1. –¢–µ—Ä–∏—Ç–æ—Ä—ñ—ó –º–æ–∂–ª–∏–≤–∏—Ö –±–æ–π–æ–≤–∏—Ö –¥—ñ–π"
    ACTIVE_COMBAT = "2. –¢–µ—Ä–∏—Ç–æ—Ä—ñ—ó –∞–∫—Ç–∏–≤–Ω–∏—Ö –±–æ–π–æ–≤–∏—Ö –¥—ñ–π"
    ACTIVE_COMBAT_WITH_RESOURCES = "3. –¢–µ—Ä–∏—Ç–æ—Ä—ñ—ó –∞–∫—Ç–∏–≤–Ω–∏—Ö –±–æ–π–æ–≤–∏—Ö –¥—ñ–π, –Ω–∞ —è–∫–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–æ–Ω—É—é—Ç—å –¥–µ—Ä–∂–∞–≤–Ω—ñ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω—ñ —Ä–µ—Å—É—Ä—Å–∏"
    TEMPORARILY_OCCUPIED = "–¢–∏–º—á–∞—Å–æ–≤–æ –æ–∫—É–ø–æ–≤–∞–Ω—ñ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó"

class DateColumnType(Enum):
    """–¢–∏–ø–∏ –¥–∞—Ç–∞-–∫–æ–ª–æ–Ω–æ–∫"""
    START_DATE = "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Å–æ–±—ã—Ç–∏—è"
    END_DATE = "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–∞—Ç–∞-–∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É
STATUS_DATE_CONFIG = {
    TerritoryStatus.POSSIBLE_COMBAT: {
        'start_date_column': '–î–∞—Ç–∞ –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—è –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –±–æ–π–æ–≤–∏—Ö –¥—ñ–π',
        'end_date_column': '–î–∞—Ç–∞ –ø—Ä–∏–ø–∏–Ω–µ–Ω–Ω—è –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –±–æ–π–æ–≤–∏—Ö –¥—ñ–π*',
        'start_date_type': DateColumnType.START_DATE,
        'end_date_type': DateColumnType.END_DATE
    },
    TerritoryStatus.ACTIVE_COMBAT: {
        'start_date_column': '–î–∞—Ç–∞ –ø–æ—á–∞—Ç–∫—É –±–æ–π–æ–≤–∏—Ö –¥—ñ–π',
        'end_date_column': '–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –±–æ–π–æ–≤–∏—Ö –¥—ñ–π*',
        'start_date_type': DateColumnType.START_DATE,
        'end_date_type': DateColumnType.END_DATE
    },
    TerritoryStatus.ACTIVE_COMBAT_WITH_RESOURCES: {
        'start_date_column': '–î–∞—Ç–∞ –ø–æ—á–∞—Ç–∫—É –±–æ–π–æ–≤–∏—Ö –¥—ñ–π',
        'end_date_column': '–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –±–æ–π–æ–≤–∏—Ö –¥—ñ–π*',
        'start_date_type': DateColumnType.START_DATE,
        'end_date_type': DateColumnType.END_DATE
    },
    TerritoryStatus.TEMPORARILY_OCCUPIED: {
        'start_date_column': '–î–∞—Ç–∞ –ø–æ—á–∞—Ç–∫—É —Ç–∏–º—á–∞—Å–æ–≤–æ—ó –æ–∫—É–ø–∞—Ü—ñ—ó',
        'end_date_column': '–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–æ—ó –æ–∫—É–ø–∞—Ü—ñ—ó*',
        'start_date_type': DateColumnType.START_DATE,
        'end_date_type': DateColumnType.END_DATE
    }
}

def connect_to_mongodb():
    """–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB Atlas"""
    try:
        print("üîå –ü—ñ–¥–∫–ª—é—á–∞—é—Å—è –¥–æ MongoDB Atlas...")
        client = MongoClient(MONGO_CONNECTION_STRING)
        client.admin.command('ping')
        print("‚úÖ –£—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MongoDB Atlas")
        return client
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB: {e}")
        sys.exit(1)

def get_territory_status_on_date(client, query_date, status_type=None):
    """
    –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –¥–∞—Ç—É –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –Ω–æ–≤–∏—Ö —Å—Ç–∞—Ç—É—Å—ñ–≤
    """
    db = client[DATABASE_NAME]
    
    collections = [
        'level1_regions',
        'level2_raions', 
        'level3_hromadas',
        'level4_settlements',
        'level_additional_city_districts'
    ]
    
    territories_with_status = []
    
    for collection_name in collections:
        collection = db[collection_name]
        
        # –ë–∞–∑–æ–≤–∏–π pipeline –¥–ª—è –ø–æ—à—É–∫—É —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–π –∑ —ñ—Å—Ç–æ—Ä—ñ—î—é
        pipeline = [
            {
                "$match": {
                    "$or": [
                        {"occupation_history": {"$exists": True}},
                        {"combat_history": {"$exists": True}},
                        {"status_history": {"$exists": True}}
                    ]
                }
            }
        ]
        
        # –î–æ–¥–∞—î–º–æ —Ñ—ñ–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É, —è–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ
        if status_type:
            pipeline.append({
                "$match": {
                    "$or": [
                        {"status_history.status": status_type.value},
                        {"occupation_history.status": status_type.value},
                        {"combat_history.status": status_type.value}
                    ]
                }
            })
        
        # –î–æ–¥–∞—î–º–æ –ø–æ–ª—è –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Å—Ç–∞—Ç—É—Å—É –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –¥–∞—Ç—É
        pipeline.extend([
            {
                "$addFields": {
                    "status_on_date": {
                        "$concatArrays": [
                            {"$ifNull": ["$occupation_history", []]},
                            {"$ifNull": ["$combat_history", []]},
                            {"$ifNull": ["$status_history", []]}
                        ]
                    }
                }
            },
            {
                "$addFields": {
                    "active_status_on_date": {
                        "$filter": {
                            "input": "$status_on_date",
                            "as": "period",
                            "cond": {
                                "$and": [
                                    {
                                        "$lte": [
                                            "$$period.start_date",
                                            query_date
                                        ]
                                    },
                                    {
                                        "$or": [
                                            {"$eq": ["$$period.end_date", None]},
                                            {"$gte": ["$$period.end_date", query_date]}
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                }
            },
            {
                "$match": {
                    "active_status_on_date": {"$ne": []}
                }
            }
        ])
        
        results = list(collection.aggregate(pipeline))
        
        for result in results:
            territories_with_status.append({
                'name': result['name'],
                'category': result.get('category', '–ù–µ–≤—ñ–¥–æ–º–∞'),
                'collection': collection_name,
                'active_periods': result['active_status_on_date']
            })
    
    return territories_with_status

def add_territory_status_period(client, territory_name, status, start_date, end_date=None, 
                               source_document="–ü–µ—Ä–µ–ª—ñ–∫ 07052025", additional_data=None):
    """
    –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É —Å—Ç–∞—Ç—É—Å—É –¥–ª—è —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –Ω–æ–≤–∏—Ö —Å—Ç–∞—Ç—É—Å—ñ–≤
    """
    db = client[DATABASE_NAME]
    
    # –®—É–∫–∞—î–º–æ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—é
    territory_doc, collection_name = find_territory(client, territory_name)
    
    if not territory_doc:
        print(f"‚ùå –¢–µ—Ä–∏—Ç–æ—Ä—ñ—é '{territory_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return False
    
    collection = db[collection_name]
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å –ø—Ä–æ —Å—Ç–∞—Ç—É—Å
    status_record = {
        'status': status.value if isinstance(status, TerritoryStatus) else status,
        'start_date': start_date,
        'end_date': end_date,
        'source_document': source_document,
        'document_date': DOCUMENT_CONFIG['document_date'],  # –ß–∏—Ç–∞–±–µ–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
        'document_date_iso': DOCUMENT_CONFIG['document_date_iso'],  # ISO —Ñ–æ—Ä–º–∞—Ç
        'updated_at': datetime.now()
    }
    
    # –î–æ–¥–∞—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ, —è–∫—â–æ —î
    if additional_data:
        status_record.update(additional_data)
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ, –≤ —è–∫—É —ñ—Å—Ç–æ—Ä—ñ—é –¥–æ–¥–∞–≤–∞—Ç–∏ –∑–∞–ø–∏—Å
    if status == TerritoryStatus.TEMPORARILY_OCCUPIED:
        history_field = 'occupation_history'
    elif status in [TerritoryStatus.POSSIBLE_COMBAT, TerritoryStatus.ACTIVE_COMBAT, TerritoryStatus.ACTIVE_COMBAT_WITH_RESOURCES]:
        history_field = 'combat_history'
    else:
        history_field = 'status_history'
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É —ñ—Å—Ç–æ—Ä—ñ—é
    if history_field in territory_doc:
        history = territory_doc[history_field]
    else:
        history = []
    
    # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó
    history.append(status_record)
    
    # –û–Ω–æ–≤–ª—é—î–º–æ –¥–æ–∫—É–º–µ–Ω—Ç
    update_data = {
        "$set": {
            history_field: history,
            "current_status": status.value if isinstance(status, TerritoryStatus) else status,
            "last_status_update": datetime.now()
        }
    }
    
    if start_date:
        update_data["$set"]["status_start_date"] = start_date
    
    if end_date:
        update_data["$set"]["status_end_date"] = end_date
    
    collection.update_one({"_id": territory_doc["_id"]}, update_data)
    
    print(f"‚úÖ –î–æ–¥–∞–Ω–æ –ø–µ—Ä—ñ–æ–¥ —Å—Ç–∞—Ç—É—Å—É '{status.value if isinstance(status, TerritoryStatus) else status}' –¥–ª—è: {territory_doc['name']}")
    return True

def find_territory(client, territory_name):
    """
    –ü–æ—à—É–∫ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    """
    db = client[DATABASE_NAME]
    
    collections = [
        'level1_regions',
        'level2_raions', 
        'level3_hromadas',
        'level4_settlements',
        'level_additional_city_districts'
    ]
    
    for collection_name in collections:
        collection = db[collection_name]
        
        # –ü–æ—à—É–∫ –∑–∞ —Ç–æ—á–Ω–∏–º —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è–º –Ω–∞–∑–≤–∏
        result = collection.find_one({"name": territory_name})
        if not result:
            # –ü–æ—à—É–∫ –∑–∞ —á–∞—Å—Ç–∫–æ–≤–∏–º —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è–º
            result = collection.find_one({"name": {"$regex": territory_name, "$options": "i"}})
        
        if result:
            return result, collection_name
    
    return None, None

def import_from_perelik_document(client, document_data):
    """
    –Ü–º–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö –∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ü–µ—Ä–µ–ª—ñ–∫ 07052025
    """
    print("üìÑ –ü–æ—á–∏–Ω–∞—é —ñ–º–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö –∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ü–µ—Ä–µ–ª—ñ–∫ 07052025...")
    
    imported_count = 0
    errors_count = 0
    
    for table_data in document_data.get('tables', []):
        table_index = table_data.get('table_index')
        headers = table_data.get('headers', [])
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤—ñ —ñ–Ω–¥–µ–∫—Å—É —Ç–∞–±–ª–∏—Ü—ñ
        if table_index == 1:
            status = TerritoryStatus.POSSIBLE_COMBAT
        elif table_index == 2:
            status = TerritoryStatus.ACTIVE_COMBAT
        elif table_index == 3:
            status = TerritoryStatus.ACTIVE_COMBAT_WITH_RESOURCES
        elif table_index in [4, 5]:
            status = TerritoryStatus.TEMPORARILY_OCCUPIED
        else:
            continue
        
        print(f"\nüìä –û–±—Ä–æ–±–ª—è—é —Ç–∞–±–ª–∏—Ü—é {table_index} - {status.value}")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω–¥–µ–∫—Å–∏ –¥–∞—Ç–∞-–∫–æ–ª–æ–Ω–æ–∫
        date_config = STATUS_DATE_CONFIG[status]
        start_date_idx = None
        end_date_idx = None
        
        for i, header in enumerate(headers):
            if date_config['start_date_column'] in header:
                start_date_idx = i
            elif date_config['end_date_column'] in header:
                end_date_idx = i
        
        if start_date_idx is None:
            print(f"‚ö†Ô∏è  –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ–ª–æ–Ω–∫—É –∑ –¥–∞—Ç–æ—é –ø–æ—á–∞—Ç–∫—É –¥–ª—è —Ç–∞–±–ª–∏—Ü—ñ {table_index}")
            continue
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ –¥–∞–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ
        for row_data in table_data.get('sample_data', []):
            if len(row_data) < 4:  # –ú—ñ–Ω—ñ–º—É–º 4 –∫–æ–ª–æ–Ω–∫–∏
                continue
            
            territory_code = row_data[0] if len(row_data) > 0 else ""
            territory_name = row_data[1] if len(row_data) > 1 else ""
            
            # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ–±–ª–∞—Å—Ç–µ–π/—Ä–∞–π–æ–Ω—ñ–≤
            if not territory_code or territory_code.startswith(('1.', '2.', '3.', '4.', '5.')):
                continue
            
            # –ü–∞—Ä—Å–∏–º–æ –¥–∞—Ç–∏
            start_date = None
            end_date = None
            
            try:
                if start_date_idx < len(row_data) and row_data[start_date_idx]:
                    start_date_str = row_data[start_date_idx].split('\n')[0]  # –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à—É –¥–∞—Ç—É, —è–∫—â–æ —ó—Ö –∫—ñ–ª—å–∫–∞
                    start_date = parser.parse(start_date_str, dayfirst=True)
                
                if end_date_idx and end_date_idx < len(row_data) and row_data[end_date_idx]:
                    end_date_str = row_data[end_date_idx]
                    if end_date_str.strip():
                        end_date = parser.parse(end_date_str, dayfirst=True)
            except Exception as e:
                print(f"‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –¥–∞—Ç–∏ –¥–ª—è {territory_name}: {e}")
                continue
            
            # –î–æ–¥–∞—î–º–æ –∑–∞–ø–∏—Å
            try:
                success = add_territory_status_period(
                    client, 
                    territory_name, 
                    status, 
                    start_date, 
                    end_date,
                    source_document=DOCUMENT_CONFIG['document_name'],
                    additional_data={
                        'territory_code': territory_code,
                        'table_source': table_index
                    }
                )
                
                if success:
                    imported_count += 1
                else:
                    errors_count += 1
                    
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É –¥–ª—è {territory_name}: {e}")
                errors_count += 1
    
    print(f"\n‚úÖ –Ü–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"üìä –£—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ: {imported_count}")
    print(f"‚ùå –ü–æ–º–∏–ª–æ–∫: {errors_count}")

def export_enhanced_data_to_csv(client, output_file="enhanced_territory_data.csv"):
    """
    –ï–∫—Å–ø–æ—Ä—Ç —Ä–æ–∑—à–∏—Ä–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö –ø—Ä–æ —Å—Ç–∞—Ç—É—Å–∏ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–π –≤ CSV —Ñ–∞–π–ª
    """
    db = client[DATABASE_NAME]
    
    collections = [
        'level1_regions',
        'level2_raions', 
        'level3_hromadas',
        'level4_settlements',
        'level_additional_city_districts'
    ]
    
    all_data = []
    
    for collection_name in collections:
        collection = db[collection_name]
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó –∑ —ñ—Å—Ç–æ—Ä—ñ—î—é
        territories = collection.find({
            "$or": [
                {"occupation_history": {"$exists": True}},
                {"combat_history": {"$exists": True}},
                {"status_history": {"$exists": True}}
            ]
        })
        
        for territory in territories:
            # –û–±—Ä–æ–±–ª—è—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –æ–∫—É–ø–∞—Ü—ñ—ó
            if 'occupation_history' in territory:
                for period in territory['occupation_history']:
                    all_data.append({
                        'territory_name': territory['name'],
                        'territory_code': territory.get('code', ''),
                        'category': territory.get('category', ''),
                        'collection': collection_name,
                        'status': period['status'],
                        'start_date': period['start_date'].strftime('%d.%m.%Y') if period['start_date'] else '',
                        'end_date': period['end_date'].strftime('%d.%m.%Y') if period['end_date'] else '',
                        'source_document': period.get('source_document', ''),
                        'updated_at': period['updated_at'].strftime('%d.%m.%Y %H:%M:%S') if 'updated_at' in period else ''
                    })
            
            # –û–±—Ä–æ–±–ª—è—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –±–æ–π–æ–≤–∏—Ö –¥—ñ–π
            if 'combat_history' in territory:
                for period in territory['combat_history']:
                    all_data.append({
                        'territory_name': territory['name'],
                        'territory_code': territory.get('code', ''),
                        'category': territory.get('category', ''),
                        'collection': collection_name,
                        'status': period['status'],
                        'start_date': period['start_date'].strftime('%d.%m.%Y') if period['start_date'] else '',
                        'end_date': period['end_date'].strftime('%d.%m.%Y') if period['end_date'] else '',
                        'source_document': period.get('source_document', ''),
                        'updated_at': period['updated_at'].strftime('%d.%m.%Y %H:%M:%S') if 'updated_at' in period else ''
                    })
            
            # –û–±—Ä–æ–±–ª—è—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É —ñ—Å—Ç–æ—Ä—ñ—é —Å—Ç–∞—Ç—É—Å—ñ–≤
            if 'status_history' in territory:
                for period in territory['status_history']:
                    all_data.append({
                        'territory_name': territory['name'],
                        'territory_code': territory.get('code', ''),
                        'category': territory.get('category', ''),
                        'collection': collection_name,
                        'status': period['status'],
                        'start_date': period['start_date'].strftime('%d.%m.%Y') if period['start_date'] else '',
                        'end_date': period['end_date'].strftime('%d.%m.%Y') if period['end_date'] else '',
                        'source_document': period.get('source_document', ''),
                        'updated_at': period['updated_at'].strftime('%d.%m.%Y %H:%M:%S') if 'updated_at' in period else ''
                    })
    
    if all_data:
        df = pd.DataFrame(all_data)
        df.to_csv(output_file, index=False, encoding='utf-8')
        print(f"‚úÖ –ï–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ {len(all_data)} –∑–∞–ø–∏—Å—ñ–≤ –≤ {output_file}")
    else:
        print("‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É")

def show_enhanced_statistics(client):
    """
    –ü–æ–∫–∞–∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –Ω–æ–≤–∏—Ö —Å—Ç–∞—Ç—É—Å—ñ–≤
    """
    db = client[DATABASE_NAME]
    
    collections = [
        'level1_regions',
        'level2_raions', 
        'level3_hromadas',
        'level4_settlements',
        'level_additional_city_districts'
    ]
    
    total_territories = 0
    territories_with_history = 0
    status_counts = {}
    document_dates = set()
    
    print("\nüìà –†–û–ó–®–ò–†–ï–ù–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–¢–ê–¢–£–°–Ü–í –¢–ï–†–ò–¢–û–†–Ü–ô:")
    print("-" * 50)
    print(f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç: {DOCUMENT_CONFIG['document_name']}")
    print(f"üìÖ –î–∞—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {DOCUMENT_CONFIG['document_date']}")
    print("-" * 50)
    
    for collection_name in collections:
        collection = db[collection_name]
        
        # –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–π
        total_in_collection = collection.count_documents({})
        total_territories += total_in_collection
        
        # –¢–µ—Ä–∏—Ç–æ—Ä—ñ—ó –∑ —ñ—Å—Ç–æ—Ä—ñ—î—é
        with_history = collection.count_documents({
            "$or": [
                {"occupation_history": {"$exists": True}},
                {"combat_history": {"$exists": True}},
                {"status_history": {"$exists": True}}
            ]
        })
        territories_with_history += with_history
        
        print(f"\n{collection_name}:")
        print(f"  –ó–∞–≥–∞–ª–æ–º —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–π: {total_in_collection}")
        print(f"  –ó —ñ—Å—Ç–æ—Ä—ñ—î—é —Å—Ç–∞—Ç—É—Å—ñ–≤: {with_history}")
        
        # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ —Å—Ç–∞—Ç—É—Å–∞—Ö —Ç–∞ –∑–±—ñ—Ä –¥–∞—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
        territories = collection.find({
            "$or": [
                {"occupation_history": {"$exists": True}},
                {"combat_history": {"$exists": True}},
                {"status_history": {"$exists": True}}
            ]
        })
        
        for territory in territories:
            for history_field in ['occupation_history', 'combat_history', 'status_history']:
                if history_field in territory:
                    for period in territory[history_field]:
                        status = period.get('status', '–ù–µ–≤—ñ–¥–æ–º–∏–π')
                        if status not in status_counts:
                            status_counts[status] = 0
                        status_counts[status] += 1
                        
                        # –ó–±–∏—Ä–∞—î–º–æ –¥–∞—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
                        if 'document_date' in period:
                            document_dates.add(period['document_date'])
    
    print(f"\nüìä –ó–ê–ì–ê–õ–¨–ù–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"  –ó–∞–≥–∞–ª–æ–º —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–π: {total_territories}")
    print(f"  –ó —ñ—Å—Ç–æ—Ä—ñ—î—é —Å—Ç–∞—Ç—É—Å—ñ–≤: {territories_with_history}")
    
    if document_dates:
        print(f"\nüìÖ –î–ê–¢–ò –î–û–ö–£–ú–ï–ù–¢–Ü–í –£ –ë–ê–ó–Ü:")
        for doc_date in sorted(document_dates):
            print(f"  ‚Ä¢ {doc_date}")
    
    print(f"\nüìã –†–û–ó–ü–û–î–Ü–õ –ü–û –°–¢–ê–¢–£–°–ê–•:")
    for status, count in sorted(status_counts.items()):
        print(f"  {status}: {count}")

def show_enhanced_menu():
    """–ü–æ–∫–∞–∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    print("\n" + "=" * 60)
    print("üèõÔ∏è  –†–û–ó–®–ò–†–ï–ù–ò–ô –ú–ï–ù–ï–î–ñ–ï–† –°–¢–ê–¢–£–°–Ü–í –¢–ï–†–ò–¢–û–†–Ü–ô")
    print("=" * 60)
    print(f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç: {DOCUMENT_CONFIG['document_name']}")
    print(f"üìÖ –î–∞—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {DOCUMENT_CONFIG['document_date']}")
    print("=" * 60)
    print("1. üîç –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –¥–∞—Ç—É")
    print("2. üìã –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é —Å—Ç–∞—Ç—É—Å—ñ–≤ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó")
    print("3. ‚ûï –î–æ–¥–∞—Ç–∏ –ø–µ—Ä—ñ–æ–¥ —Å—Ç–∞—Ç—É—Å—É")
    print("4. üìÑ –Ü–º–ø–æ—Ä—Ç –∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ü–µ—Ä–µ–ª—ñ–∫ 07052025")
    print("5. üìä –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö –≤ CSV")
    print("6. üìà –†–æ–∑—à–∏—Ä–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    print("7. üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—ñ–≤")
    print("0. üö™ –í–∏—Ö—ñ–¥")
    print("=" * 60)

def show_status_settings():
    """–ü–æ–∫–∞–∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Å—Ç–∞—Ç—É—Å—ñ–≤"""
    print("\nüîß –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –°–¢–ê–¢–£–°–Ü–í:")
    print("-" * 30)
    for i, status in enumerate(TerritoryStatus, 1):
        config = STATUS_DATE_CONFIG[status]
        print(f"{i}. {status.value}")
        print(f"   –î–∞—Ç–∞ –ø–æ—á–∞—Ç–∫—É: {config['start_date_column']}")
        print(f"   –î–∞—Ç–∞ –∫—ñ–Ω—Ü—è: {config['end_date_column']}")
        print()

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print("üöÄ –†–û–ó–®–ò–†–ï–ù–ò–ô –ú–ï–ù–ï–î–ñ–ï–† –°–¢–ê–¢–£–°–Ü–í –¢–ï–†–ò–¢–û–†–Ü–ô")
    print("–ü—ñ–¥—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç—É—Å–∏ –∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ '–ü–µ—Ä–µ–ª—ñ–∫ 07052025'")
    
    # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è –¥–æ MongoDB
    client = connect_to_mongodb()
    
    while True:
        show_enhanced_menu()
        
        try:
            choice = input("–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é (0-7): ").strip()
            
            if choice == "0":
                print("üëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
                break
                
            elif choice == "1":
                date_str = input("–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É (—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–†–†–†–†): ").strip()
                status_filter = input("–í–≤–µ–¥—ñ—Ç—å —Å—Ç–∞—Ç—É—Å –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó (–∞–±–æ Enter –¥–ª—è –≤—Å—ñ—Ö): ").strip()
                
                try:
                    query_date = parser.parse(date_str, dayfirst=True)
                    status_type = None
                    
                    if status_filter:
                        for status in TerritoryStatus:
                            if status.value == status_filter:
                                status_type = status
                                break
                    
                    territories = get_territory_status_on_date(client, query_date, status_type)
                    
                    print(f"\nüîç –¢–µ—Ä–∏—Ç–æ—Ä—ñ—ó –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º –Ω–∞ {query_date.strftime('%d.%m.%Y')}:")
                    if territories:
                        for territory in territories:
                            print(f"  ‚Ä¢ {territory['name']} ({territory['category']})")
                            for period in territory['active_periods']:
                                start_str = period['start_date'].strftime('%d.%m.%Y') if period['start_date'] else '–Ω/–¥'
                                end_str = period['end_date'].strftime('%d.%m.%Y') if period['end_date'] else '–Ω/–¥'
                                print(f"    –°—Ç–∞—Ç—É—Å: {period['status']} ({start_str} - {end_str})")
                    else:
                        print("  –ù–µ–º–∞—î —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–π –∑ –≤–∫–∞–∑–∞–Ω–∏–º —Å—Ç–∞—Ç—É—Å–æ–º –Ω–∞ —Ü—é –¥–∞—Ç—É")
                        
                except Exception as e:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
                    
            elif choice == "2":
                territory_name = input("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó: ").strip()
                territory_doc, collection_name = find_territory(client, territory_name)
                
                if territory_doc:
                    print(f"\nüìã –Ü—Å—Ç–æ—Ä—ñ—è —Å—Ç–∞—Ç—É—Å—ñ–≤ –¥–ª—è '{territory_doc['name']}':")
                    
                    # –ü–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ —Ç–∏–ø–∏ —ñ—Å—Ç–æ—Ä—ñ—ó
                    for history_type in ['occupation_history', 'combat_history', 'status_history']:
                        if history_type in territory_doc and territory_doc[history_type]:
                            print(f"\n  {history_type.replace('_', ' ').title()}:")
                            for i, period in enumerate(territory_doc[history_type], 1):
                                start_str = period['start_date'].strftime('%d.%m.%Y') if period['start_date'] else '–Ω/–¥'
                                end_str = period['end_date'].strftime('%d.%m.%Y') if period['end_date'] else '–Ω/–¥'
                                source = period.get('source_document', '')
                                print(f"    {i}. {period['status']}: {start_str} - {end_str} {f'({source})' if source else ''}")
                else:
                    print(f"‚ùå –¢–µ—Ä–∏—Ç–æ—Ä—ñ—é '{territory_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                    
            elif choice == "3":
                territory_name = input("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó: ").strip()
                
                print("\n–î–æ—Å—Ç—É–ø–Ω—ñ —Å—Ç–∞—Ç—É—Å–∏:")
                for i, status in enumerate(TerritoryStatus, 1):
                    print(f"{i}. {status.value}")
                
                status_choice = input("–í–∏–±–µ—Ä—ñ—Ç—å —Å—Ç–∞—Ç—É—Å (1-4): ").strip()
                try:
                    status = list(TerritoryStatus)[int(status_choice) - 1]
                except:
                    print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä —Å—Ç–∞—Ç—É—Å—É")
                    continue
                
                start_date_str = input("–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –ø–æ—á–∞—Ç–∫—É (–î–î.–ú–ú.–†–†–†–†): ").strip()
                end_date_str = input("–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –∫—ñ–Ω—Ü—è (–î–î.–ú–ú.–†–†–†–†, –∞–±–æ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫—É): ").strip()
                
                try:
                    start_date = parser.parse(start_date_str, dayfirst=True)
                    end_date = None
                    if end_date_str:
                        end_date = parser.parse(end_date_str, dayfirst=True)
                    
                    add_territory_status_period(client, territory_name, status, start_date, end_date)
                    
                except Exception as e:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –¥–∞—Ç–∏: {e}")
                    
            elif choice == "4":
                print("üìÑ –Ü–º–ø–æ—Ä—Ç –∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ü–µ—Ä–µ–ª—ñ–∫ 07052025")
                print("–ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –¥–∞–Ω—ñ –∑ categories_analysis.json...")
                
                try:
                    with open('categories_analysis.json', 'r', encoding='utf-8') as f:
                        document_data = json.load(f)
                    
                    import_from_perelik_document(client, document_data)
                    
                except FileNotFoundError:
                    print("‚ùå –§–∞–π–ª categories_analysis.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                    print("–°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø—É—Å—Ç—ñ—Ç—å analyze_categories.py –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –¥–æ–∫—É–º–µ–Ω—Ç–∞")
                except Exception as e:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {e}")
                    
            elif choice == "5":
                output_file = input("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ñ–∞–π–ª—É –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 'enhanced_territory_data.csv'): ").strip()
                if not output_file:
                    output_file = "enhanced_territory_data.csv"
                export_enhanced_data_to_csv(client, output_file)
                
            elif choice == "6":
                show_enhanced_statistics(client)
                
            elif choice == "7":
                show_status_settings()
                
            else:
                print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
                
        except KeyboardInterrupt:
            print("\nüëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
            break
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
    
    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è
    client.close()
    print("üîå –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ MongoDB –∑–∞–∫—Ä–∏—Ç–æ")

if __name__ == "__main__":
    main() 